{
    "view": "Action?id=server",
    "children": [
        {
            "view": "Action?[manifest:().action]()"
        }
    ],
    "__props__": {
        "id": "n1p7Q1Z1X0E3J1b3r6l5a241u4",
        "doc": "server",
        "counter": 1,
        "creationDate": 1711031365214,
        "collection": "view.application",
        "chunk": "chunk1",
        "lastModified": 1723218645010,
        "dev": false,
        "actions": {
            "getDataOnLoad": {
                "getData": "[collectionsList:()._():[search():[collection=_.collection;if():[_.field]:[find=_.field]]:[if():[_.data.value()]:[allData:().[__.mapName]=_.data]:[#la shay2 kenat send fase]]]]()::[send():[success=true;data=allData:();notification=dueNotifications:()]]",
                "_": "updateNotificationsInSession();createCollectionsList();getData()",
                "createCollectionsList": "collectionsList:()=:[collection=vouchersInfo;mapName=vouchersInfo]:[collection=account;mapName=allLedgersAccounts]:[collection=publicCollection;mapName=publicData]:[collection=sharedManagersInfo;mapName=sharedManagersInfo]:[collection=accountingJournalInfo;mapName=transaction]:[collection=sheet;mapName=governmentAccounts;field=[name='Government Accounts']]:[collection=bracketSheet;mapName=bracketSheetTable]:[collection=settings;mapName=settingsInfo]:[collection=globalPathes;mapName=collectionsInfo]:[collection=printViewInfo;mapName=printView]:[collection=galleryManagerInfo;mapName=galleryManagerInfo]:[collection=generalLedgerInfo;mapName=generalLedgerInfo]:[collection=ticketInvoiceInfo;mapName=ticketInvoiceInfo]"
            },
            "getGallery": "search():[collection=storage;limit=25;skip=_.imgCounter]:[if():[_.data.value()]:[send():[data=_.data.values();s=__.imgCounter;counter=__.imgCounter;success=true]]:[handleFailedResponse():[res=[msg='No image found!']]]]",
            "customHistory": {
                "setNewHistory": "[_.history]:()=[updateBy=_.updateBy;[_.collection]=_.id;id=gen():60+[today().timestamp()+''];creationDate=today().timestamp();creationDay=todayStart().timestamp();createdBy=_.user];[setDif()]()::[saveHistory()]",
                "setHistoryDoc": "history:()=[updateBy=_.updateBy;[_.collection]=_.id;id=gen():60+[today().timestamp()+''];creationDate=today().timestamp();creationDay=todayStart().timestamp();createdBy=_.user];[setDif()]()::[saveHistory()]",
                "checkData": "[getDataDifference():[data=_.data;oldData=_.oldData]]()::[setHistoryDoc():[data=_.data;oldData=_.oldData;id=_.id;collection=_.collection;update=true;updateBy=_.updateBy]]",
                "saveHistory": "save():[collection=history;if():[_.history]:[data=[_.history]:()]:[data=history:()]]:[if():[!_.success]:[handleFailedResponse:[res=[msg='Sorry, Something went wrong!']]]]",
                "setDif": "if():[dif:()]:[history:().difference=dif:()];if():[_.create]:[history:().description=[_.collection+'']+' creation'].elif():[_.update]:[history:().description='Data has been updated'];#hellaaaaaa",
                "_": "if():[_.collection;_.user;_.id]:[setNewHistory():[collection=_.collection;user=_.user;id=_.id;create=true;history=_.history]].elif():[_.data;_.oldData;_.id;_.collection]:[checkData()]:[handleFailedResponse():[res=[msg='Missing data!';actionName='customHistory']]]"
            },
            "updateImage": {
                "getImage": "search():[collection=storage;find:[id=_.id]]:[if():[_.success]:[updateAndSaveImage()]:[handleFailedResponse():[res=[message='Something went wrong']]]]",
                "updateAndSaveImage": "save():[collection=storage;data=__]:[if():[_.success]:[send():[success=true;message='Image updated successfully']]:[handleFailedResponse():[res=[message='Something went wrong']]]]",
                "_": "if():[_]:[getImage()]:[handleFailedResponse():[res=[message='Missing data!']]]"
            },
            "eraseSheet": "erase():[collection=sheet;doc=_]:[send():[success=true;msg='Sheet deleted successfuly!']]",
            "uploadImage": "[_.data.creationDate=today().timestamp();generatReferenceNumber():[collection=storage;branch=_.branch]:[_.data.ref=ref:();_.data.count=count:();_.data.branch=_.branch]]()::[upload():[file=_.data;data=_.data]:[send():[data=_.data]]]",
            "getDataDifference": {
                "checkEquality": "if():[__.oldData.[_]!=__.data.[_]]:[if():[[_+0].type()=number]:[().test=___]:[().test=_];dif:().push():[[['old']=__.oldData.[_];['new']=__.data.[_];path=().test]]]",
                "findMapArray": "oldDataKeys:()._():[if():[__.oldData.[_].type()=list||__.oldData.[_].type()=map]:[recurAction()]:[checkEquality()]]",
                "setKeys": "oldDataKeys:()=_.data.keys();findMapArray()",
                "_": "if():[_.data;_.oldData]:[setKeys()]:[handleFailedResponse():[res=[msg='Sorry, missing data']]]",
                "recurAction": "getDataDifference():[oldData=__.oldData.[_];data=__.data.[_]]"
            },
            "generateUsername": {
                "searchUsername": "search():[collection=username;find:[username=_.username]]:[if():[_.data.value()]:[generateUser():[firstName=___.firstName;lastName=___.lastName;foundFirst=true]]:[send():[username=__.username]]]",
                "generateUser": "if():[_.foundFirst]:[().username=_.firstName+_.lastName+gen():[10;number]]:[().username=[_.firstName]+[_.lastName]];searchUsername():[username=().username]",
                "_": "if():[true]:[generateUser():[firstName=_.firstName;lastName=_.lastName]]:[handleFailedResponse():[res=[msg='Missing Data!']]]"
            },
            "generatReferenceNumber": {
                "setReference": "num:()=counter():[_.data.value()].counter;_.data.value().counter+=1;updateReference()",
                "checkRefExistance": "search():[collection=counter;find=[collection=_.collection]]:[if():[_.data.value()]:[pushInRepairStack();setReference()]:[createReference()]]",
                "updateReference": "save():[collection=counter;data=_.data.value()]:[if():[_.data]:[[____.var]:()=_.data.code+'-'+num:();count:()=_.data.counter;ref:()=_.data.code+'-'+num:()]:[handleFailedResponse():[res=[msg='No reference number found!']]]]",
                "setCode": "_.data.value().managers._():[code:().push():[_.managers]];#send():[success=false;ddd=_.data.value()];setCounterDoc()",
                "createReference": "search():[collection=globalPathes]:[if():[_.data.value()]:[setCode()]:[handleFailedResponse():[res=[msg='Missing data!']]]]",
                "setCounterDoc": "counterDoc:()=[collection=___.collection;id=gen():60+[today().timestamp()+''];creationDate=today().timestamp();creationDay=todayStart().timestamp();code=code:().find():[collection=___.collection].code;length=8;counter=if():[___.collection=currency]:[-1]:[0];max=99999999;timestamp=today().timestamp();reset=yearly];saveCounter()",
                "saveCounter": "save():[collection=counter;data=counterDoc:()]:[if():[_.data]:[generatReferenceNumber():[collection=_.data.collection;branch=_.data.branch]]:[handleFailedResponse():[res=[msg='Something went wrong!']]]]",
                "_": "if():[_.collection]:[checkRefExistance():[collection=_.collection]]:[handleFailedResponse():[res=[msg='generatReferenceNumber error']]]",
                "pushInRepairStack": "if():[!repairStack:().find():[data.id=_.data.value().id]]:[repairStack:().push():[update=true;collection=counter;pushLocation='generatReferenceNumber';data=_.data.value().clone()]];"
            },
            "generateLedgerCounter": {
                "handleCounter": "checkAndFixCounter();if():[__.accountNumber]:[_.data.value().counterList.push():[__.accountNumber.toString()]]:[if():[_.data.value().counterList.inc():[_.data.value().counter.toString()]]:[handleCounter()]]",
                "getCurrency": "[__.currencies._()::[search():[collection=currency;find=[code=_]]:[if():[_.data.value()]:[currenciesInfo:().push():[code=__;counter=_.data.value().counter]]:[handleFailedResponse():[msg='Currency does not exist!']]]]]()::[updateCounter()]",
                "checkCounterExistence": "search():[collection=counter;find=[code=_.ledger;if():[_.type='Agency Supplier'||_.type='Airline Supplier';_.ledger='4011']:[type=_.type]]]:[if():[_.data.value()]:[pushInRepairStack();getCurrency()]:[handleFailedResponse():[res=[under=_;under2=__;msg='Counter document does not exist!']]]]",
                "_": "setAccountNumber();[checkAccountNumberExistence():[update=_.update;code=_.ledger;type=_.type;accountNumber=_.accountNumber;keepInServer=true]]()::[if():[_.ledger;_.currencies]:[checkCounterExistence()]:[handleFailedResponse():[res=[msg='generateLedgerCounter';under=_;under2=__]]]]",
                "checkAndFixCounter": "if():[__.accountNumber]:[if():[_.data.value().counterList.inc():[[_.data.value().counter+1].toString()]||[_.data.value().counter+1]=[__.accountNumber.num()]]:[_.data.value().counter+=1;checkAndFixCounter()]]:[_.data.value().counter+=1]",
                "pushInRepairStack": "if():[!repairStack:().find():[data.id=_.data.value().id]]:[repairStack:().push():[update=true;collection=counter;pushLocation='generateLedgerCounter.getCurrency';data=_.data.value().clone()]]",
                "genLedger": "currenciesInfo:()._():[ledgerAccounts:().push():[__.data.code+'/'+if():[____.accountNumber]:[____.accountNumber]:[__.data.counter]+'/'+[_.counter.toString()]]];currenciesInfo:().del()",
                "updateCounter": "handleCounter();save():[collection=counter;data=_.data.value()]:[if():[_.data]:[genLedger()]:[handleFailedResponse():[msg='Sorry no reference number found!']]]",
                "setAccountNumber": "if():[_.accountNumber]:[().accountNumber=_.accountNumber.clone();_.accountNumber.push():[().accountNumber]]:[_.accountNumber=:];"
            },
            "searchAssets": {
                "successFalseAction": "handleFailedResponse():[res=[msg=Data does not exist!]]",
                "getAccount": "[searchAccount():[[_].flat()]]()::[if():[!accountSearchResult:()]:[successFalseAction()]:[getAssets():[data=[account=accountSearchResult:().():id]]]]",
                "assetSearchFields": "branch=_.data.branch;if():[_.data.name]:[name=_.data.name]",
                "checkIfAccounResultExist": "if():[accountSearchResult:()]:[getLastBalance()]:[[getAccount():[var=accountSearchResult;data=[asset=_.data.values().():id]]]()::[getLastBalance()]]",
                "combineData": "assetSearchResult:()._():[().account=accountSearchResult:().find():[asset=_.id];().lastBalance=LastBalanceSearchResult:().find():[id=().account.lastBalance];_.ledgerAccount=().account.ledgerAccount;_.credit=().lastBalance.accountBalances.find():[account=().lastBalance.account].credit;_.debit=().lastBalance.accountBalances.find():[account=().lastBalance.account].debit;_.balance=().lastBalance.accountBalances.find():[account=().lastBalance.account].balance];send():[success=true;data=assetSearchResult:().sort():[ascending;path=creationDate]]",
                "getLastBalance": "[searchTransaction():[var=LastBalanceSearchResult;docs=accountSearchResult:().():lastBalance]]()::[if():[LastBalanceSearchResult:()]:[combineData()]:[successFalseAction()]]",
                "getAssets": "search():[collection=asset;docs=_.docs;find:[assetSearchFields()];limit=25]:[if():[_.data.value()]:[assetSearchResult:()=_.data.values();checkIfAccounResultExist();]:[successFalseAction()]]",
                "_": "if():[_.data.ledgerAccount]:[getAccount():[var=accountSearchResult;data=[ledgerAccount=_.data.ledgerAccount]]]:[getAssets()]"
            },
            "customCheckExistence": {
                "checkGeneralInfo": "search():[collection=_.collection;find:[generalFields()]]:[if():[_.data.value()]:[handleFailedResponse():[res=[msg=__.collection.capitalize()+' already exists!']]]:[continue:()=true]]",
                "checkUser": "search():[collection=username;find:[username=_.data.username]]:[if():[_.data.value()]:[handleFailedResponse():[res=[msg=__.collection.capitalize()+' already exists!']]]:[continue:()=true]]",
                "generalFields": "if():[_.data.name]:[name=_.data.name];if():[_.data.firstName]:[name=_.data.firstName];if():[_.data.lastName]:[name=_.data.lastName];if():[_.data.code]:[code=_.data.code]",
                "updateGeneralData": "save():[collection=__.collection;data=__.data]:[if():[_.success]:[send():[msg=___.collection.capitalize()+' Updated Successfully']]:[handleFailedResponse():[res=[msg='Sorry, missing data!']]]]",
                "getGeneralData": "search():[collection=_.collection;doc=_.data.id]:[if():[_.data.value()]:[setHistoryAndUpdate()]:[handleFailedResponse():[res=[msg='Does not exists!';under=_;under2=__]]]]",
                "setHistoryAndUpdate": "[customHistory():[oldData=_.data;data=__.data;collection=__.collection;id=_.data.id;updateBy=__.updateBy]]()::[updateGeneralData()]",
                "_": "if():[_.data.id;_.updateBy]:[getGeneralData()].elif():[_.collection=user]:[checkUser()].elif():[_.collection]:[checkGeneralInfo()]:[handleFailedResponse():[res=[message='Missing data!';actionName='customCheckExistence']]]"
            },
            "updateSheet": {
                "getSheet": "search():[collection=_.collection;find=[id=_.data.id]]:[if():[_.data.value()]:[updateAndSaveSheet()]:[handleFailedResponse():[res=[message='Something went wrong!']]]]",
                "updateAndSaveSheet": "save():[collection=sheet;data=__.data]:[if():[_.success]:[send():[success=true;message='Sheet updated successfully!']]:[handleFailedResponse():[res=[message='Something went wrong!']]]]",
                "_": "if():[_.data]:[getSheet()]:[handleFailedResponse():[res=[message='Missing data!']]]"
            },
            "customSearchEngine": {
                "sendData": "if():[identifier:()=account]:[[getBalance()]()::[send():[success=true;data=_.data.values()]]]:[send():[success=true;data=_.data.values().sort():[ascending;path=creationDate]]]",
                "getBalance": "search():[collection=transaction;docs=_.data.values.():balance;limit=1000]:[__.data.values()._():[_.balance=__.data.[_.balance].clone()]]",
                "searchField": "find=[];if():[_.data.ref]:[().find.ref=_.data.ref]:[_.data.keys()._():[if():[_=email||=contactNumber]:[[_].inc=__.data.[_]]:[().find.[_]=__.data.[_]]]];return():[().find]",
                "setIdentifier": "identifier:()=_.data.identifier.clone();_.data.identifier.del();getData()",
                "getData": "search():[collection=identifier:();if():[_.data.keys().len()>0]:[find=searchField()]]:[if():[_.data.value()]:[sendData()]:[handleFailedResponse():[res=[under=_;under2=__;under3=___;msg=identifier:().capitalize()+' not found!']]]]",
                "_": "if():[_.data.identifier]:[setIdentifier()]:[handleFailedResponse():[res=[msg='Identifier is missing!']]]"
            },
            "customCondition": {
                "checkOrConditionOperatorsInListPath": "if():[_.operator]:[if():[[_.condition+_.operator+__.data.[__.listPath].[__.index].[_.conditionReference]]()]:[().isConditionTrue=true]]:[if():[_.condition.inc():[__.data.[__.listPath].[__.index].[_.conditionReference]]]:[().isConditionTrue=true]]",
                "handelIfConditionReferenceExistForOrCondition": "if():[_.conditionReferenceInPath]:[if():[__.data.[__.listPath].[__.index].[_.conditionReferenceInPath]]:[().isConditionTrue=true]].elif():[_.conditionReferenceInDoc]:[if():[__.data.[_.conditionReferenceInDoc]]:[().isConditionTrue=true]].elif():[conditionReference]:[if():[__.data.[__.listPath].[__.index].[_.conditionReference]||__.data.[_.conditionReference]]:[().isConditionTrue=true]]",
                "checkConditionInData": "if():[_.condition]:[loopOverCondition()].elif():[_.orCondition]:[loopOverOrCondition()]",
                "loopOverConditionInListPath": "().isConditionTrue=true;_.condition._():[if():[_.condition]:[checkConditionReferenceTypeInListPath()]:[handelIfConditionReferenceExist()]]",
                "checkConditionReferenceTypeInListPath": "if():[_.conditionReferenceInPath]:[checkAndConditionOperatorsInListPath()].elif():[_.conditionReferenceInDoc]:[checkAndConditionOperatorsInData()].elif():[_.conditionReference]:[if():[__.data.[__.listPath].[__.index].[_.conditionReference]]:[checkAndConditionOperatorsInListPath()]:[checkAndConditionOperatorsInData()]]",
                "checkAndConditionOperatorsInListPath": "if():[_.operator]:[if():[![_.condition+_.operator+__.data.[__.listPath].[__.index].[_.conditionReference]]()]:[().isConditionTrue=false]]:[if():[!_.condition.inc():[__.data.[__.listPath].[__.index].[_.conditionReference]]]:[().isConditionTrue=false]]",
                "loopOverCondition": "().isConditionTrue=true;_.condition._():[if():[_.condition]:[checkAndConditionOperatorsInData()].elif():[_.conditionReference]:[if():[!__.data.[_.conditionReference]]:[().isConditionTrue=false]]]",
                "handelIfConditionReferenceExist": "if():[_.conditionReferenceInPath]:[if():[!__.data.[__.listPath].[__.index].[_.conditionReferenceInPath]]:[().isConditionTrue=false]].elif():[_.conditionReferenceInDoc]:[if():[!__.data.[_.conditionReferenceInDoc]]:[().isConditionTrue=false]].elif():[conditionReference]:[if():[!__.data.[__.listPath].[__.index].[_.conditionReference];!__.data.[_.conditionReference]]:[().isConditionTrue=false]]",
                "handleListOfCombinationOrConditions": "().isCombinationConditionTrue=false;_.orCondition._():[if():[customCondition():[condition=_.condition;orCondition=_.orCondition;data=__.data]]:[().isCombinationConditionTrue=true]]",
                "checkConditionInListPath": "if():[_.condition]:[loopOverConditionInListPath()].elif():[_.orCondition]:[loopOverOrConditionInListPath()]",
                "checkConditionType": "if():[_.listPath;_.index]:[checkConditionInListPath()]:[checkConditionInData()]",
                "checkAndConditionOperatorsInData": "if():[_.operator='!=']:[if():[[_.condition]=[__.data.[_.conditionReference]]]:[().isConditionTrue=false]].elif():[_.operator]:[if():[![_.condition+_.operator+__.data.[_.conditionReference]]()]:[().isConditionTrue=false]]:[if():[__.condition.0.condition.0='No']:[];if():[!_.condition.inc():[__.data.[_.conditionReference]]]:[().isConditionTrue=false]]",
                "loopOverOrConditionInListPath": "().isConditionTrue=false;_.orCondition._():[if():[_.condition]:[checkOrConditionReferenceTypeInListPath()]:[handelIfConditionReferenceExistForOrCondition()]]",
                "loopOverOrCondition": "().isConditionTrue=false;_.orCondition._():[if():[_.condition]:[checkOrConditionOperatorsInData()].elif():[_.conditionReference]:[if():[__.data.[_.conditionReference]]:[().isConditionTrue=true]]]",
                "checkOrConditionReferenceTypeInListPath": "if():[_.conditionReferenceInPath]:[checkOrConditionOperatorsInListPath()].elif():[_.conditionReferenceInDoc]:[checkOrConditionOperatorsInData()].elif():[_.conditionReference]:[if():[__.data.[__.listPath].[__.index].[_.conditionReference]]:[checkOrConditionOperatorsInListPath()]:[checkOrConditionOperatorsInData()]]",
                "checkOrConditionOperatorsInData": "if():[_.operator]:[if():[[_.condition+_.operator+_.conditionReference]()]:[().isConditionTrue=true]]:[if():[_.condition.inc():[__.data.[_.conditionReference]]]:[().isConditionTrue=true]]",
                "handleListOfCombinationConditions": "().isCombinationConditionTrue=true;_.condition._():[if():[!customCondition():[condition=_.condition;orCondition=_.orCondition;data=__.data]]:[().isCombinationConditionTrue=false]]",
                "_": "if():[_.condition.0.condition.0.conditionReference||_.condition.0.orCondition.0.conditionReference]:[handleListOfCombinationConditions();return():[().isCombinationConditionTrue]].elif():[_.orCondition.0.condition.0.conditionReference||_.orCondition.0.orCondition.0.conditionReference]:[handleListOfCombinationOrConditions();return():[().isCombinationConditionTrue]]:[checkConditionType();return():[().isConditionTrue]]"
            },
            "getIdByLedger": {
                "splitLedger": "if():[_.value.split():'/'.len()=3]:[getLedgerAccount()]:[handleFailedResponse():[res=[msg='Ledger is badly formatted!';value=_.value]]]",
                "getLedgerAccount": "search():[collection=account;find=[ledgerAccount.inc=_.value]]:[if():[_.data.value()]:[if():[_.data.value().blockAccount.toString()='false'||true]:[if():[__.var]:[[__.var]:()=_.data.value().id]:[ledgerId:()=_.data.value().id]]:[handleFailedResponse():[res=[blocked=_.data.value().blockAccount;msg=__.value+' '+'is Blocked']]]]:[handleFailedResponse():[res=[under=_;under2=__;msg='General ledger not found!']]]]",
                "_": ";#ledgerId:()=gen():5;#[_.var]:()=gen():5;if():[_.value]:[splitLedger()]:[handleFailedResponse():[res=[msg='Ledger is expected! ';getIdByLedger=_;under2=__]]]"
            },
            "checkAccountNumberExistence": {
                "getCounterDoc": "search():[collection=counter;find=[code=_.code;if():[_.type]:[type=_.type]]]:[if():[_.data.value()]:[if():[__.accountNumber.0.toString().len()>0;__.accountNumber.0!=0]:[checkAccountNumberIfAvailable()]:[generateNewCounter()]]:[createLedgerCounterDoc()]]",
                "generateNewCounter": "_.data.value().counter+=1;if():[_.data.value().counter>_.data.value().max]:[handleFailedResponse():[res=[msg='You have reach the maximum counter available!']]].elif():[_.data.value().counterList.inc():[_.data.value().counter.toString()]]:[generateNewCounter()]:[if():[!__.keepInServer]:[send():[success=true;accountNumber=_.data.value().counter]]:[mainReceivedData:().accountNumber=_.data.value().counter;__.accountNumber.push():[_.data.value().counter]]]",
                "createLedgerCounterDoc": "ledgerCounter:()=[code=__.code;length=8;if():[__.type!='Agency Supplier';__.type!='Airline Supplier']:[counter=0;counterList=:0;start=0;max=99999999].elif():[__.type='Airline Supplier';__.code='4011']:[counter=0;counterList=:0;start=0;max=1000].elif():[__.type='Agency Supplier';__.code='4011']:[counter=1000;counterList=:1000;start=1000;max=99999999];reset=yearly;creationDate=today().timestamp();id=gen():60+[today().timestamp()+''];timestamp=today().timestamp();creationDay=todayStart().timestamp();type=__.type];saveLedger()",
                "checkAccountNumberIfAvailable": "if():[_.data.value().counterList.inc():[__.accountNumber.toString()]||__.accountNumber>_.data.value().max||__.accountNumber<_.data.value().start;!__.update]:[handleFailedResponse():[res=[under=_;under2=__;msg='Account number not available!']]]:[if():[!__.keepInServer]:[send():[success=true;msg='Account number available!']]]",
                "saveLedger": "save():[collection=counter;data=ledgerCounter:()]:[if():[_.data.value()]:[checkAccountNumberExistence():[___]]]",
                "_": "if():[_.accountNumber.type()=number]:[().accountNumber=_.accountNumber.clone();_.accountNumber.push():[().accountNumber]];if():[_.accountNumber.0=0;_.keepInServer]:[handleFailedResponse():[res=[msg='Account number must be greater than 0!']]].elif():[_.code]:[getCounterDoc()]:[handleFailedResponse():[res=[msg='Missing data!']]]"
            },
            "guideSearchResult": "if():[_.data.identifier='account']:[_.data.identifier.del();searchAccount()].elif():[_.data.identifier='transaction']:[_.data.identifier.del();searchTransaction()].elif():[_.data.identifier='voucher']:[_.data.identifier.del();searchVoucher()].elif():[_.data.identifier='currency']:[_.data.identifier.del();searchCurrency()]:[customSearchEngine()]",
            "searchVoucher": {
                "checkFields": "if():[_.data.ref]:[getVoucherByRef()].elif():[_.data.paymentWay||_.data.ledgerAccount.inc():'/']:[getAccountIds()]:[getVouchers()]",
                "getTransactions": "().vouchersIds=:;[().accountsIds._():[search():[collection=transaction;find:[account=_]]:[if():[_.data.value()]:[().vouchersIds.push():[_.data.values()]]]]]()::[getVouchers()]",
                "getVouchers": "().find=[];setFindMap();search():[collection=voucher;find=().find]:[if():[_.data.value()]:[send():[success=true;findFields=().find;data=_.data.values().sort():[ascending;path=creationDate]]]:[handleFailedResponse():[res=[doc=__;msg='No voucher found!']]]]",
                "getVoucherByRef": "search():[collection=voucher;find:[ref=_.data.ref;type=_.data.type]]:[if():[_.data.value()]:[send():[success=true;data=_.data.values()]]:[handleFailedResponse():[res=[message='No voucher found!']]]]",
                "_": "if():[_.data.type]:[checkFields()]:[handleFailedResponse():[res=[msg='Voucher type does not specified!']]]",
                "getAccountIds": "().accountsLedgers=:;().accountsIds=:;if():[_.data.paymentWay]:[().accountsLedgers.push():[_.data.paymentWay]];if():[_.data.ledgerAccount]:[().accountsLedgers.push():[_.data.ledgerAccount]];[().accountsLedgers._()::[getIdByLedger():[value=_]:[().accountsIds.push():[ledgerId:()]]]]()::[getTransactions()]",
                "setFindMap": "if():[().vouchersIds]:[().find.id.in=().vouchersIds.():voucher.filter()];().find.type=_.data.type;if():[_.data.fromAccount]:[().find.fromAccounts.inc=_.data.fromAccount];if():[_.data.toAccount]:[().find.toAccounts.inc=_.data.toAccount];if():[_.data.financialAccount]:[().find.financialLedgerAccounts.inc=_.data.financialAccount];if():[_.data.receivablesAndPayablesAccount]:[().find.receivablesAndPayablesLedgerAccounts.inc=_.data.receivablesAndPayablesAccount];if():[_.data.status]:[().find.status=_.data.status];if():[_.data.fromDate]:[().find.creationDate.'>='=_.data.fromDate];if():[_.data.toDate]:[().find.creationDay.'<='=_.data.toDate]"
            },
            "login": {
                "searchUserInfo": "search():[collection=user;find=[id=__.data.value().user]]:[checkIfSessionExist():[user=_.data.value().id]]:[handleFailedResponse():[res=[message='Something went wrong']]]]",
                "checkSessionExpiry": "if():[__.user]:[updateExpiry();genNewSession()]:[if():[_.data.value().expiryDate>=today().timestamp()]:[updateExpiry();genNewSession()]:[handleFailedResponse():[res=[message='Session timeout']]]]",
                "genNewSession": "_.data.value().session=gen():20+[today().timestamp()+''];session:()=_.data.value().session;saveUpdate()",
                "getPermission": "search():[collection=permission;find=[user=_.data.id]]:[if():[_.data.vlaue()]:[userData:().permission=_.data.value().permission]]",
                "getUser": "search():[collection=user;find=[id=_.user]]:[if():[_.data.value()]:[userData:()=[firstName=_.data.value().firstName;lastName=_.data.value().lastName];getBranch();getPermission()]:[handleFailedResponse():[res=[msg='Something went wrong!']]]]",
                "searchUsername": "search():[collection=username;find=[username=_.username]]:[if():[_.data.value()]:[searchPassword()]:[handleFailedResponse():[res=[msg='Username doesnt exist!']]]]",
                "createSession": "session:()=gen():20+today().timestamp();;save():[collection=session;data=[id=gen():20+[today().timestamp()+''];session=session:();user=_.user;expiryDate=today().timestamp()+86400000]]:[if():[_.success]:[[getUser():[user=__.user]]()::[send():[success=true;session=session:();data=userData:()]]]:[handleFailedResponse():[res=[msg='Something went wrong']]]]",
                "searchPassword": "search():[collection=password;find=[username=_.data.value().id;password=__.password]]:[if():[_.data.value()]:[searchUserInfo()]:[handleFailedResponse():[res=[msg='Password doesnt exist!']]]]",
                "checkIfSessionExist": "search():[collection=session;find=[if():[_.user]:[user=_.user];if():[_.session]:[session=_.session]]]:[if():[_.data.value()]:[checkSessionExpiry()]:[if():[__.user]:[createSession():[user=__.user]]:[handleFailedResponse():[res=[message='No session exist']]]]]",
                "updateExpiry": "_.data.value().expiryDate=today().timestamp()+86400000",
                "saveUpdate": "save():[collection=session;data=_.data.value()]:[if():[_.success]:[[getUser():[user=_.data.user]]()::[send():[success=true;session=session:();data=userData:()]]]:[handleFailedResponse():[res=[msg='Something went wrong']]]]",
                "getBranch": "search():[collection=branch]:[if():[_.data.value()]:[userData:().branch=_.data.values();userData:().currentBranch=_.data.values().find():[headQuarter].id;getCurrency():[branch=_.data.values().find():[headQuarter].id]]:[handleFailedResponse():[res=[msg='Something went wrong!']]]]",
                "_": "userData:()='';if():[_.username;_.password]:[searchUsername()].elif():[_.session]:[checkIfSessionExist()]:[handleFailedResponse():[res=[message'Missing data']]]",
                "getCurrency": "[searchCurrency():[useInServer=true]]()::[userData:().currency=currencyData:();userData:().defaultCurrency=[id=currencyData:().find():[counter=0].id;value=currencyData:().find():[counter=0].code]]"
            },
            "getCurrencyId": {
                "getCurrency": "search():[collection=currency;find:[code=_.code;branch=_.branch]]:[if():[_.data.value()]:[currency:()=_.data.value()]:[handleFailedResponse():[res=[msg='Currency not found!']]]]",
                "_": "if():[_.code;_.branch]:[getCurrency()]:[handleFailedResponse():[res=[msg='Missing data for currency!']]]"
            },
            "updateScheduleInSession": {
                "updateSessions": "_.data.values()._():[save():[collection=session;data=_]]",
                "getSessionByUser": "search():[collection=session;find:[user.in=().users]]:[if():[_.data.value()]:[pushDataInSchedule()]:[handleFailedResponse():[res=[msg='Missing data!']]]]",
                "pushDataInSchedule": "_.data.values()._():[if():[!_.schedule]:[_.schedule=:];_.schedule.push():[___.data]];updateSessions()",
                "_": "if():[_.data;_.collection]:[().users=_.data.users.clone();_.data.users.del();getSessionByUser()]:[handleFailedResponse():[res=[msg='Missing data!';action=updateScheduleInSession]]]"
            },
            "eraseImg": "if():[_.id]:[erase():[collection=storage;find=[id=_]]:[send():[success=true;msg='Image deleted successfully!']]]:[send():[success=false;msg='ID not found cant delete this image!']]",
            "checkSheet": {
                "updateSheet": "save():[collection=sheet;data=__.data]:[send():[msg=Name changes successfuly;success=true]]",
                "saveSheet": "genRefNum():[sheet]:[sheet:().ref=ref:();sheet:().id=gen():60+[today().timestamp()+''];sheet:().creationDate=today().timestamp();save():[collection=sheet;data=sheet:()]:[if():[_.success]:[send():[msg=sheet saved successfully;success=true]]:[handleFailedResponse():[res=[msg='somthing went wrong try again later!']]]]]",
                "searchSheet": "search():[collection=sheet;find:[id=_.id]]:[if():[_.data.value()]:[__.data.id=__.id;__.data.creationDate=_.data.creationDate;updateSheet()]:[handleFailedResponse():[res=[msg='Sheet Not Found!']]]]",
                "_": "if():[_.data]:[sheet:()=_.data;if():[_.updateStatus='false']:[saveSheet()]:[searchSheet()]]:[handleFailedResponse():[res=[msg='Missing Info']]]"
            },
            "getUserBySession": {
                "getPermission": "search():[collection=permission;find:[user=_.data.id]]:[if():[_.data.value()]:[user:().permission=_.data.value()]:[handleFailedResponse():[res=[msg='Session does not exist!']]]]",
                "getUser": "search():[collection=user;id=_.data.value().user]:[if():[_.data.value()]:[user:()=_.data.value();#getPermission()]:[handleFailedResponse():[res=[msg='Session does not exist!']]]]",
                "getSession": "search():[collection=session;find:[session=_]]:[if():[_.data.value()]:[getUser()]:[handleFailedResponse():[res=[msg='Session does not exist!']]]]",
                "_": "if():[_]:[getSession()]:[handleFailedResponse():[res=[msg='Somthing went wrong!']]]"
            },
            "createDefaultLedgerAccounts": {
                "setDefaultZeros": "().taha=_.text+'t';while():[().taha.len()<[_.digits+1]]:[().taha='0'+().taha];return():[().taha.replaceItem():'t':'']",
                "setAccountAndBalanceCountersDoc": "().accountAndBalanceCountersDoc.push():[setLedgerCountersDoc():[code='ACC';collection='account']];#().accountAndBalanceCountersDoc.push():[setLedgerCountersDoc():[code='TRN';collection='Transaction']]",
                "saveAccountAndBalanceCountersDoc": "save():[collection=counter;data=().accountAndBalanceCountersDoc]:[if():[_.data.value()]:[send():[success=true;data=_.data;hellooooo=bbbbbbbbbbb]]]",
                "filterAccounts": "_.data.value().data._():[if():[_.number.0.in():[___.generalLedgers]||_.number.in():[___.generalLedgers]]:[().filteredList.push():[_]]];setAccounts()",
                "setAccountDoc": "return():[id=().accountId;creationDate=today().timestamp();creationDay=todayStart().timestamp();ref='ACC-'+[setDefaultZeros():[text=().i;digits=8]];ledgerAccount=[_.number.toString()]+'/1/1';name=_.name;currency='USD';blockAccount='No';branch=receviedData:().branch;description='Default account';startsWith=setStartsWith();#lastBalance=().balanceId]",
                "saveCountersData": "save():[collection=counter;data=().defaultAccountsList.():counter]:[if():[_.data.value()]:[saveAccountAndBalanceCountersDoc()]]",
                "setStartsWith": "().startsWith=:;().currentNumber='';range():[_.number.toString().len()]._():[().currentNumber+=__.number.toString().[_];().startsWith.push():[.currentNumber]];return():[().startsWith]",
                "#generateRefNumbers": "[().defaultAccountsList._()::[generatReferenceNumber():[collection=account;branch=receviedData:().branch]:[_.ref=ref:()]]]()::[saveAccounts();send():[success=true;data=().defaultAccountsList;hello=sss]]",
                "setLedgerCountersDoc": "return():[id=gen():60+'-'+[today().timestamp()+''];creationDate=today().timestamp();creationDay=todayStart().timestamp();code=_.code;collection=_.collection;counter=if():[_.code='ACC']:[().defaultAccountsList.len()]:1;length=8;start=99999999;end=99999999;reset=yearly;branch=receviedData:().branch]",
                "setAccounts": "().i=1;().filteredList._():[().accountId=gen():60+'-'+[today().timestamp()+''];().balanceId=gen():60+'-'+[today().timestamp()+''];().defaultAccountsList.push():[account=setAccountDoc();#balance=setBalanceDoc();counter=setLedgerCountersDoc():[code=_.number.toString()]];().i++];setAccountAndBalanceCountersDoc();saveAccountsData()",
                "saveTransactionsData": "save():[collection=transaction;data=().defaultAccountsList.():balance]:[if():[_.data.value()]:[saveCountersData()]]",
                "setBalanceDoc": "return():[id=().balanceId;creationDate=today().timestamp();creationDay=todayStart().timestamp();ref='TRN-'+[setDefaultZeros():[text=().i;digits=8]];account=().accountId;branch=receviedData:().branch;description='Opening';credit=0;debit=0;accountBalances=:[account=().accountId;credit=0;debit=0;balance=0]]",
                "getAccountsFromSheet": "search():[collection=sheet;find:[name='Government Accounts']]:[if():[_.data.value()]:[filterAccounts()]:[handleFailedResponse():[res=[msg='Accounts data doesnt exist!']]]]",
                "saveAccountsData": "save():[collection=account;data=().defaultAccountsList.():account]:[if():[_.data.value()]:[saveCountersData();#saveTransactionsData()]]",
                "_": "receviedData:()=_;().filteredList=:;getAccountsFromSheet()"
            },
            "getDataForDroplist": "search():[collection=_.collection;find=[startsWith.contains=_.startsWith]]:[if():[_.data.value()]:[send():[success=true;data=_.data.values()]]:[handleFailedResponse():[res=[msg='Data not found!';actionName='getDataForDroplist']]]]",
            "changeSheetName": {
                "saveNewSheetName": "save():[collection=sheet;data=_.data.value()]:[send():[msg=Name changes successfuly;success=true]]",
                "sheetNameSearch": "search():[collection=sheet;find:[id=_.id]]:[if():[_.data.value()]:[_.data.value().name=__.newName;saveNewSheetName()]:[handleFailedResponse():[res=[msg=Sheet Not Found]]]]",
                "_": "if():[_]:[sheetNameSearch()]:[handleFailedResponse():[res=[msg='Please Enter A Valid Name']]]"
            },
            "saveThroughSchema": {
                "setDocsBySchema": "checkRequirement():[collection=_.collection;data=_.data;newDoc=gen():5+[today().timestamp()+''];edit=_.edit]",
                "getUser": "getUserBySession():[_.session]:[if():[user:()]:[_.data.createdBy=user:().id;getGovernmentExchangeRate();checkDocExistence()]:[handleFailedResponse():[res=[action=getUser;msg='User not found!']]]]",
                "checkDocExistence": "if():[collection=user]:[checkExistence():[collection=_.collection;data=_.data]:[if():[continue:()]:[setDocsBySchema();continue:().del()]]]:[setDocsBySchema()]",
                "_": "if():[_.data;_.collection]:[if():[!mainReceivedData:()]:[mainReceivedData:()=_.data];if():[!mainData:()]:[mainData:()=_];formManagerName:()=_.manager||_.collection;if():[_.session]:[getUser()]:[setDocsBySchema()]]:[handleFailedResponse():[res=[under=_;actionName='saveThroughSchema';msg='Missing data!']]]",
                "getGovernmentExchangeRate": "[searchCurrency():[useInServer=true]]()::[currencyData:()._():[exchangeRatesInfo:().push():[code=_.code;counter=_.counter;exchangeRate=_.exchangeRate]]]",
                "#setHistory": "[saveStack:()._():[[if():[_.data.createdBy]:[customHistory():[id=_.data.id;collection=_.collection;user=_.data.createdBy]]]()::[saveSatck()]]]()::[send():[success=true;msg=_.collection:().capitalize()+' Created Successfuly!']]"
            },
            "getSessionAndMarkNotificationAsRead": {
                "updateSession": "save():[collection=session;data=_.data.value()]:[if():[_.success]:[send():[success=true]]:[]]",
                "_": "search():[collection=session;find:[session=_.session]]:[if():[_.data.value()]:[_.data.value().notification.pull():[id=__.notification];updateSession()]:[handleFailedResponse():[res=[msg='something went wrong!']]]]"
            },
            "dropListFromSheet": {
                "_": "search():[collection=sheet;find:[name=_.name]]:[if():[_.data.value()]:[send():[data=_.data.value();success=true]]:[handleFailedResponse():[res=[msg='Cannot find sheet!']]]]"
            },
            "initializeDocAndCheckForRecursion": {
                "checkIfIncludeNextStep": "if():[_.schema.nextStep]:[if():[_.schema.nextStep.type()=list]:[handelNextStepCondition()]:[if():[_.schema.nextStep.condition]:[handelNextStepCustomCondition()]:[formManagerName:()=_.schema.nextStep.manager;().nextStep=_.schema.nextStep.collection;doNextStep()]]]:[if():[!_.dontCheckForRecursion]:[checkBeforeSaveStep();if():[_.schema.customCondition]:[[[_.schema.customCondition]()]()::[loopOverStackAndSaveData()]]:[loopOverStackAndSaveData()]]]",
                "checkBeforeSaveStep": "saveStack:()._():[if():[_.beforeSaveStep]:[if():[_.condition]:[handleFailedResponse():[res=[under=_];actionName='initializeDocAndCheckForRecursion']];_.beforeSaveStep.keyValue._():[if():[_.staticValue]:[__.data.[_.key]=[_.staticValue]()]:[__.data.[_.key]=saveStack:().find():[.[_.findKey]=[_.findValue]].data.reduce():[path=_.path]]];_.beforeSaveStep.del()]]",
                "doNextStep": "().nextStepCollection=().nextStep;().nextStep.del();checkRequirement():[data=__.receivedData||_.receivedData;collection=().nextStepCollection;newDoc=gen():5+[today().timestamp()+'']]",
                "handleHelpersKeyValue": "if():[_.schema.helpersKeyValue]:[_.schema.helpersKeyValue._():[if():[_.staticValue]:[dataToPushInStack:().[_.key]=[_.staticValue]()]:[dataTypeHandler():[value=__.receivedData.[_.path];[_].flat();data=__.receivedData;newDoc=dataToPushInStack]]]]",
                "saveStackAndCheckForRecursion": "if():[!_.schema.ignoreMainDoc]:[dataToPushInStack:().():[data=_.data;collection=_.collection];if():[_.schema.beforeSaveAction]:[dataToPushInStack:().beforeSaveAction=_.schema.beforeSaveAction];if():[_.schema.beforeSaveStep]:[dataToPushInStack:().beforeSaveStep=_.schema.beforeSaveStep];if():[_.schema.update]:[dataToPushInStack:().update=true].elif():[_.schema.customUpdate]:[dataToPushInStack:().customUpdate=_.schema.customUpdate].elif():[_.schema.customSave]:[dataToPushInStack:().customSave=_.schema.customSave];saveStack:().push():[dataToPushInStack:()]];if():[_.schema.staticAction]:[[_.schema.staticAction]()];checkIfIncludeNextStep()",
                "_": "[dataToPushInStack:()=[];initializeDoc()]()::[saveStackAndCheckForRecursion()]",
                "generateReference": "generatReferenceNumber():[collection=_.collection;branch=_.receivedData.branch]:[_.data.ref=ref:();if():[_.schema.generateCounter]:[_.data.counter=count:()]]",
                "initializeDoc": "[handleHelpersKeyValue()]()::[if():[!_.schema.update;!_.schema.customUpdate]:[_.data.id=gen():60+'-'+[today().timestamp()+''];_.receivedData.[_.collection+'Id']=_.data.id;_.data.creationDate=now().timestamp();_.data.creationDay=todayStart().timestamp()];if():[_.schema.generateReference]:[generateReference()];if():[_.schema.generateLedger]:[generateLedger()]]",
                "handelNextStepCondition": "().nextStepValidation=false;_.schema.nextStep._():[().nextStepCondition=customCondition():[condition=_.condition;orCondition=_.orCondition;data=mainReceivedData:()];if():[().nextStepCondition]:[().nextStepValidation=true;formManagerName:()=_.manager;().nextStep=_.collection]];if():[().nextStep]:[doNextStep()]:[checkBeforeSaveStep();loopOverStackAndSaveData()]",
                "generateLedger": "if():[_.schema.generateLedger.toString()!='true']:[().generalLedger=[_.schema.generateLedger]()]:[().generalLedger=_.receivedData.generalLedger];generateLedgerCounter():[update=_.schema.update;ledger=().generalLedger;branch=_.receivedData.branch;type=_.receivedData.type;currencies=_.receivedData.currency;accountNumber=_.receivedData.accountNumber]:[_.data.accountNumber=ledgerAccounts:().0.split():'/'.1;_.data.ledgerAccount=ledgerAccounts:();ledgerAccounts:().del()]"
            },
            "searchNotification": {
                "combineData": "__.data.values()._():[_.createdBy=__.data.values().find():[id=_.createdBy].firstName+' '+__.data.values().find():[id=_.createdBy].lastName];send():[success=true;data=__.data.values()]",
                "getSender": "search():[collection=user;docs=_.data.values().():createdBy]:[if():[_.data.value()]:[combineData()]:[handleFailedResponse():[res=[msg='Data not found']]]]",
                "_": "[updateNotificationsInSession():[session=_.session]]()::[search():[collection=notification;if():[dueNotifications:().len()>0]:[docs=dueNotifications:().():id]]:[if():[_.data.value()]:[getSender()]:[handleFailedResponse():[res=[under=_;under2=__;msg='Data not found']]]]]"
            },
            "handleFailedResponse": {
                "_": "[if():[repairStack:().len()>0]:[handleRepairStack()]]()::[send():[success=false;msg='Something went wrong!';[_.res].flat();repairStack=repairStack:().clone();]]",
                "handleRepairStack": "repairStack:()._()::[if():[_.delete]:[deleteDoc()].elif():[_.update]:[updateDoc()]]",
                "deleteDoc": "if():[_.data.id]:[getDoc();erase():[collection=_.collection;find=[id=_.data.id]]:[ll]]",
                "updateDoc": "save():[collection=_.collection;find=[id=_.data.id];data=_.data]",
                "getDoc": "search():[collection=_.collection;find=[id=_.data.id]]"
            },
            "searchCurrency": {
                "_": "getCurrency()",
                "getCurrency": "search():[collection=currency;#find:[if():[_.data.name]:[name=_.data.name];if():[_.data.country]:[country=_.data.country];if():[_.data.code]:[code=_.data.code]]]:[if():[_.data.value()]:[getExchangeRate()]:[if():[!__.useInServer]:[handleFailedResponse():[res=[msg='Currency does not exist!']]]]]",
                "getExchangeRate": "search():[collection=exchangeRate;find=[id.in=_.data.values().():lastExchangeRate]]:[if():[_.data.values().len()=__.data.values().len()]:[combineData()]:[send():[under=_;under2=__;success=false];handleFailedResponse():[res=[msg='Something went wrong!']]]]",
                "combineData": "__.data.values()._():[_.exchangeRate=__.data.values().find():[id=_.lastExchangeRate].exchangeRate];if():[___.useInServer]:[currencyData:()=__.data.values().sort():[ascending;path=counter]]:[send():[success=true;data=__.data.values().sort():[ascending;path=counter]]]"
            },
            "signupForm": "search():[collection=signUpInfo]:[if():[_.data.value()]:[send():[success=true;data=_.data.values()]]:[send():[success=false;msg='Data not found']]]",
            "checkRequirement": {
                "getSchema": "search():[collection=schemas;find=[collection=_.collection]]:[if():[_.data.value()]:[().schemaData=if():[__.edit]:[_.data.value().update.[formManagerName:()]]:[_.data.value().create.[formManagerName:()]]]:[handleFailedResponse():[res=[msg='Schema does not exist!']]]]",
                "initializeDoc": "initializeDocAndCheckForRecursion():[receivedData=_.data;data=[_.newDoc]:();collection=_.collection;schema=().schemaData]",
                "_": "if():[_.collection;_.data;_.newDoc]:[[getSchema()]()::[[checkPath()]()::[initializeDoc()]]]:[handleFailedResponse():[res=[actionName='checkRequirement';under=_;msg='Missing data!']]]",
                "checkPath": {
                    "_": "().schemaData.keyValue._()::[if():[_.condition||_.customCondition||_.orCondition]:[checkCondition()]:[checkPathData()]]",
                    "checkPathData": "if():[_.listPath]:[setPathKeys()].elif():[_.staticDoc]:[checkDataTypeForStaticDoc()]:[checkDataType()]",
                    "handleCondition": "if():[_.condition||_.orCondition]:[().conditionApplied=customCondition():[condition=_.condition;orCondition=_.orCondition;data=_.data]].elif():[_.customCondition]:[().conditionApplied=[_.customCondition]()]",
                    "checkDataType": "dataTypeHandler():[value=__.data.[_.path];[_].flat();data=__.data;newDoc=__.newDoc]",
                    "setPathKeys": {
                        "_": "if():[__.data.[_.listPath]]:[if():[_.listOfDocs]:[setDocsFromListItems()]:[handleListItems()]]:[handleFailedResponse():[res=[under=_;listPath=_.listPath;msg='listPath does not exist in data!']]]",
                        "setDocsFromListItems": "__.data.[_.listPath]._()::[__.docsKeyValue._()::[if():[_.condition]:[checkCondition():[data=__].elif():[_.customCondition]:[().conditionApplied=[_.customCondition]()];if():[().conditionApplied]:[setDoc()]]:[setDoc()]]]",
                        "checkCondition": "handleCondition():[condition=__.condition;orCondition=__.orCondition;customCondition=__.customCondition;data=_.data]",
                        "setDoc": "().inputListClone=_.input.clone();_.input._():[if():[_.condition]:[checkCondition():[data=___];if():[!().conditionApplied]:[().inputListClone.pullItem():[_]]]];handleDataTypeForListOfDocs()",
                        "handleListItems": "__.data.[_.listPath]._()::[().inputListClone=__.input.clone();__.input._()::[if():[_.condition]:[checkCondition():[data=__];if():[!().conditionApplied]:[().inputListClone.pullItem():[_]]]];handleDataTypeForListPath()]",
                        "handleDataTypeForListOfDocs": "dataTypeHandler():[[_].flat();listOfDocs=true;input=().inputListClone;data=__;newDoc=____.newDoc;listPath=___.listPath]",
                        "handleDataTypeForListPath": "dataTypeHandler():[input=().inputListClone;data=_;newDoc=___.newDoc;listPath=__.listPath]"
                    },
                    "checkDataTypeForStaticDoc": {
                        "_": "[().inputListClone=_.keyValue.clone();_.keyValue._():[if():[_.condition]:[checkCondition();if():[!().conditionApplied]:[().inputListClone.pullItem():[_]]]]]()::[handleDataType()]",
                        "checkCondition": "handleCondition():[condition=_.condition;orCondition=_.orCondition;customCondition=_.customCondition;data=__]",
                        "handleDataType": "dataTypeHandler():[indexAsDoc=[];collection=_.collection;generateReference=_.generateReference;input=().inputListClone;data=__.data]"
                    },
                    "checkCondition": "[handleCondition():[condition=_.condition;orCondition=_.orCondition;customCondition=_.customCondition;data=__.data]]()::[if():[().conditionApplied]:[checkPathData()]]"
                }
            },
            "dataTypeHandler": {
                "_": "if():[_.listPath]:[assigningDataInListPath()].elif():[_.indexAsDoc]:[handleIndexAsDoc()]:[assigningData()]",
                "assigningDataInListPath": "[_.input._():[dataTypeHandler():[[_].flat();value=__.data.[_.path]]]]()::[if():[_.listOfDocs]:[saveListPathData()]:[[_.newDoc]:().[_.listPath].push():[_.indexAsDoc]]]",
                "checkDataType": {
                    "_": "if():[_.type=boolean]:[if():[[_.value].type()='boolean']:[().currentVariable=_.value]:[().currentVariable=false]].elif():[_.type=generalLedger]:[pushGeneralLedgerFromLedgerAccount()].elif():[_.type=number]:[if():[[_.value].isNum()]:[().currentVariable=[_.value.num()]]:[().currentVariable=false]].elif():[_.type=image]:[checkImage():[value=_.value;required=_.required]].elif():[_.type='ledger']:[getIdByLedger():[value=_.value;var=_.refVar]:[().currentVariable=[_.refVar]:()]].elif():[_.type=id]:[checkIdExistence():[value=_.value;collection=_.path]:[().currentVariable=_.value]].elif():[_.type=array]:[if():[[_.value].type()=list]:[cleanArray():[array=_.value]]].elif():[_.type=balance]:[().currentVariable=[__.data.debit||0]-[__.data.credit||0]].elif():[_.type=currency]:[getCurrencyId():[code=_.value;branch=__.data.branch]:[().currentVariable=currency:().id]].elif():[[_.value].type()=_.type]:[().currentVariable=_.value]:[().currentVariable=false]",
                    "pushGeneralLedgerFromLedgerAccount": "if():[_.value.split():['/'].len()=3]:[().currentVariable=_.value.split():['/'].0]:[().currentVariable=false]",
                    "checkImage": ";#toBeOverride;if():[_.value.len()>=1]:[().unrequiredDataHandler='';_.value._():[if():[__.required]:[if():[!_.id||!_.url]:[handleFailedResponse():[res=[msg='Image not found!']]]:[().currentVariable.push():[_]]]:[if():[_.id;_.url]:[().currentVariable.push():[_]]]]]:[if():[_.required]:[().requiredDataHandler='';handleFailedResponse():[res=[msg='Image was expected!']]]:[().unrequiredDataHandler='']]",
                    "cleanArray": "().filteredArray=_.array.filter().clone();if():[().filteredArray.len()>0]:[().currentVariable=().filteredArray]:[().currentVariable=false]"
                },
                "assigningData": "[().currentVariable.del();if():[_.staticValue]:[handleStaticValue()]:[checkDataType():[value=_.value;type=_.type;path=_.path;refVar=gen():5;required=_.required]]]()::[if():[().currentVariable||().currentVariable=0]:[if():[_.newDoc]:[[_.newDoc]:().[_.key]=().currentVariable;if():[_.keyToPushInReceivedData]:[_.data.[_.keyToPushInReceivedData]=().currentVariable]]:[___.indexAsDoc.[_.key]=().currentVariable]]:[if():[_.required]:[handleFailedResponse():[res=[data=_;mainData=mainReceivedData:();stack=saveStack:();msg='Data type error!']]]]]",
                "saveListPathData": {
                    "_": "[if():[!_.ignoreInitialize]:[initializeListPathData()]]()::[saveListPathInSaveStack()]",
                    "generateReference": "generatReferenceNumber():[collection=_.collection;branch=_.indexAsDoc.branch]:[_.indexAsDoc.ref=ref:()]",
                    "saveListPathInSaveStack": "saveStack:().push():[update=_.update;customUpdate=_.customUpdate;data=_.indexAsDoc;collection=_.collection;customSave=_.customSave;beforeSaveStep=_.beforeSaveStep;];if():[_.helpersKeyValue]:[_.helpersKeyValue._():[saveStack:().[-1].helpersKeyValue.[_.key]=[_.staticValue]()]]",
                    "initializeListPathData": "_.indexAsDoc.branch=mainReceivedData:().branch;[_.indexAsDoc.id=gen():60+'-'+[today().timestamp()+''];_.indexAsDoc.creationDate=today().timestamp();_.indexAsDoc.creationDay=todayStart().timestamp();if():[_.generateReference]:[generateReference()]]"
                },
                "handleStaticValue": "if():[_.type]:[[checkDataType():[value=[_.staticValue]();type=_.type;path=_.path;refVar=gen():5]]]:[().currentVariable=[_.staticValue]()]",
                "handleIndexAsDoc": "[_.input._():[dataTypeHandler():[value=__.data.[_.path];[_].flat()]]]()::[initializeDocAndCheckForRecursion():[dontCheckForRecursion=true;schema=__;receivedData=mainReceivedData:();data=_.indexAsDoc;collection=_.collection]]"
            },
            "#saveTransaction": {
                "_": "transactionReceivedData:()=_.data.clone();if():[_.data.'credit-debit']:[resetData()].elif():[_.data.openingBalance='Yes';_.data.headAccount]:[setBalanceWithHeadAccount()].elif():[_.data.openingBalance='Yes']:[setBalanceWithoutHeadAccount()]:[[getAccounts():[id=transactionReceivedData:().account]]()::[getBalances()]]",
                "initializeDoc": "newBalance:().():[currency=transactionReceivedData:().currency;generalLedger=transactionReceivedData:().generalLedger;id=transactionReceivedData:().id;creationDate=transactionReceivedData:().creationDate;creationDay=transactionReceivedData:().creationDay;ref=transactionReceivedData:().ref;description=transactionReceivedData:().description;branch=transactionReceivedData:().branch;sysCredit=transactionReceivedData:().sysCredit;sysDebit=transactionReceivedData:().sysDebit];saveBalance():[data=newBalance:()]",
                "saveBalance": {
                    "_": "repairStack:().push():[delete=true;collection=transaction;pushLocation='saveTransaction.saveBalance';data=_.data.clone()];save():[collection=transaction;data=_.data]:[if():[_.data]:[updateLastBalanceInHeadAccounts()]:[handleFailedResponse():[res=[msg='Something went wrong during save balance!']]]]",
                    "updateLastBalanceInHeadAccounts": "if():[accountsAndBalances:().():account.len()>0]:[getAccountAndUpdateLastBalance()]",
                    "getAccountAndUpdateLastBalance": "search():[collection=account;find=[id.in=accountsAndBalances:().():account]]:[if():[_.data.value()]:[_.data.values()._():[_.lastBalance=newBalance:().id];saveUpdate()]:[handleFailedResponse():[res=[msg='Something went wrong during update last transacion']]]]",
                    "saveUpdate": "save():[collection=account;data=_.data.values()]:[delGBVar();if():[!_.data]:[handleFailedResponse():[res=[msg='Something went wrong during update last balance']]]]"
                },
                "getBalances": {
                    "_": "().existLastBalance=false;accountsAndBalances:().():lastBalance._():[if():[_]:[().existLastBalance=true]];if():[().existLastBalance]:[getTransactions()]:[combineData()]",
                    "combineData": "accountsAndBalances:()._():[accountsLastBalances:()._():[#checkCreditLimit();if():[_.id=__.lastBalance]:[__.lastBalanceData=_]]];if():[!().limitExceeded||true]:[setNewBalance()]",
                    "getTransactions": "search():[collection=transaction;find=[id.in=accountsAndBalances:().():lastBalance]]:[if():[_.data.value()]:[pushInRepairStack();accountsLastBalances:()=_.data.values();;combineData()]:[handleFailedResponse():[res=[msg='Transaction not found!']]]]",
                    "pushInRepairStack": "_.data.values()._():[if():[!repairStack:().find():[data.id=_.id]]:[repairStack:().push():[update=true;collection=transaction;pushLocation='saveTransaction.getBalances';data=_.clone()]]]",
                    "setNewBalance": "if():[transactionReceivedData:().openingBalance='Yes']:[setIfOpeningBalance()]:[setIfNotOpeningBalance()];addVoucherAndInvoiceRefs();setAccountBalances()",
                    "setIfOpeningBalance": "newBalance:()=[currency=transactionReceivedData:().currency;account=transactionReceivedData:().account;ledgerAccount=transactionReceivedData:().ledgerAccount;credit=transactionReceivedData:().credit;debit=transactionReceivedData:().debit;exchangeRates=transactionReceivedData:().exchangeRates;systemAccountBalances=:[account=transactionReceivedData:().account;credit=transactionReceivedData:().credit||0;debit=transactionReceivedData:().debit||0;balance=transactionReceivedData:().debit||0-transactionReceivedData:().credit||0]]",
                    "setIfNotOpeningBalance": "newBalance:()=[currency=transactionReceivedData:().currency;account=transactionReceivedData:().account;ledgerAccount=transactionReceivedData:().ledgerAccount;credit=transactionReceivedData:().credit;debit=transactionReceivedData:().debit;exchangeRates=transactionReceivedData:().exchangeRates];if():[accountsAndBalances:().find():[account=newBalance:().account]]:[newBalance:().accountBalances=accountsAndBalances:().find():[account=newBalance:().account].lastBalanceData.accountBalances]",
                    "setAccountBalances": "accountsAndBalances:()._():[;().instance.del();().instance=_.lastBalanceData.accountBalances.find():[ledgerAccount=transactionReceivedData:().ledgerAccount].accountBalances.find():[account=_.account];if():[!().instance]:[().instance=[credit=0;debit=0;balance=0;account=_.account]];().accountBalance=[account=_.account;credit=[().instance.credit]+[transactionReceivedData:().credit];debit=().instance.debit+transactionReceivedData:().debit];().accountBalance.balance=().accountBalance.debit-().accountBalance.credit;pushInAccountBalances();().accountBalance.del()];setSystemAccountBalance()",
                    "setSystemAccountBalance": "[calculateAmountsInSystemCurrency()]()::[accountsAndBalances:()._():[().instance=_.lastBalanceData.systemAccountBalances.find():[account=_.account];().accountBalance=[account=_.account;credit=[().instance.credit]+[transactionReceivedData:().sysCredit];debit=().instance.debit+transactionReceivedData:().sysDebit];().accountBalance.balance=().accountBalance.debit-().accountBalance.credit;newBalance:().systemAccountBalances.push():[().accountBalance]];initializeDoc()]",
                    "addVoucherAndInvoiceRefs": "newBalance:().():[voucher=transactionReceivedData:().voucher;voucherRef=transactionReceivedData:().voucherRef;invoiceID=transactionReceivedData:().invoiceID;invoiceRef=transactionReceivedData:().invoiceRef]",
                    "pushInAccountBalances": "if():[newBalance:().accountBalances.find():[ledgerAccount=transactionReceivedData:().ledgerAccount]]:[newBalance:().accountBalances.find():[ledgerAccount=transactionReceivedData:().ledgerAccount].accountBalances.replace():[account=().accountBalance.account]:[().accountBalance]]:[newBalance:().accountBalances.push():[ledgerAccount=transactionReceivedData:().ledgerAccount;accountBalances=:];pushInAccountBalances()]",
                    "checkCreditLimit": "if():[__.limit||__.limit=0;____.data.credit!=0]:[if():[[_.accountBalances.0.accountBalances.0.balance-____.data.credit]<__.limit]:[().limitExceeded=true;handleFailedResponse():[res=[credit=_.accountBalances.0.accountBalances.0.balance-____.data.credit;limt=__.limit;action=checkCreditLimit;msg='You have exceed the credit limit of account '+_.ledgerAccount]]]]",
                    "calculateAmountsInSystemCurrency": "().exchangeRate=transactionReceivedData:().exchangeRates.find():[counter=transactionReceivedData:().ledgerAccount.split():'/'.2.num()].exchangeRate;if():[().exchangeRate]:[transactionReceivedData:().sysCredit=[[transactionReceivedData:().credit]/[().exchangeRate]];transactionReceivedData:().sysDebit=transactionReceivedData:().debit/().exchangeRate]:[handleFailedResponse():[res=[llll=transactionReceivedData:();msg='Could not find the exchange rate to handle the calculation!']]]"
                },
                "getAccounts": {
                    "_": "search():[collection=account;find=[id=_.id]]:[if():[_.data.value()]:[pushInRepairStack();pushInAccountsAndBalances();if():[_.data.value().headAccount]:[getAccounts():[id=_.data.value().headAccount]]]:[handleFailedResponse():[res=[msg='Account not found!']]]]",
                    "pushInRepairStack": "if():[!repairStack:().find():[data.id=_.data.value().id]]:[repairStack:().push():[update=true;collection=account;pushLocation='saveTransaction.getAccounts';data=_.data.value().clone()]];",
                    "pushInAccountsAndBalances": "accountsAndBalances:().push():[account=__.id;lastBalance=_.data.value().lastBalance;if():[!_.data.value().lastBalance]:[lastBalanceData=lastBalanceData()];headAccount=_.data.value().headAccount||false;limit=_.data.value().limit];",
                    "lastBalanceData": "return():[[account=__.id;description='Opening';credit=0;debit=0;systemAccountBalances=:[account=__.id;credit=0;debit=0;balance=0]]]"
                },
                "delGBVar": "accountsAndBalances:().del();accountsLastBalances:().del();transactionReceivedData:().del();newBalance:().del()",
                "setBalanceWithoutHeadAccount": {
                    "_": "newBalance:()=[account=transactionReceivedData:().account;credit=transactionReceivedData:().credit||0;debit=transactionReceivedData:().debit||0;ledgerAccount=transactionReceivedData:().ledgerAccount;accountBalances=initAccountBalances()];initializeDoc()",
                    "initAccountBalances": "return():[:[account=transactionReceivedData:().account;credit=transactionReceivedData:().credit||0;debit=transactionReceivedData:().debit||0;balance=[transactionReceivedData:().debit||0]-[transactionReceivedData:().credit||0]]]"
                },
                "setBalanceWithHeadAccount": "[getAccounts():[id=_.data.headAccount]]()::[getBalances()]",
                "resetData": {
                    "_": "reInitializeData();saveTransaction():[data=().editedData]",
                    "reInitializeData": "().editedData=[[_.data].flat();if():[_.data.'credit-debit'.toLowerCase()=credit]:[credit=_.data.amount;debit=0]:[debit=_.data.amount;credit=0]];().editedData.amount.del();().editedData.'credit-debit'.del()"
                }
            },
            "saveTransaction": {
                "_": "transactionReceivedData:()=_.data.clone();if():[_.data.'credit-debit']:[resetData()]:[calculateAmountsAndExchangeRates():[transactionReceivedData:()];[getAllAccountsRelatedToThisTransaction()]()::[[getAccountsLastBalances()]()::[[combineData()]()::[[initializeDoc():[transactionReceivedData:()];checkCreditLimit()]()::[saveBalance():[data=newBalance:()]]]]]]",
                "initializeDoc": "newBalance:().():[generalLedger=_.generalLedger;id=_.id;creationDate=_.creationDate;creationDay=_.creationDay;ref=_.ref;description=_.description;branch=_.branch;sysCredit=().sysCredit;sysDebit=().sysDebit]",
                "saveBalance": {
                    "_": "pushInRepairStack();save():[collection=transaction;data=_.data]:[if():[_.data]:[updateLastBalanceInHeadAccounts()]:[handleFailedResponse():[res=[msg='Something went wrong during save balance!']]]]",
                    "updateLastBalanceInHeadAccounts": "if():[accountsAndBalances:().():account.len()>0]:[getAccountAndUpdateLastBalance()]",
                    "getAccountAndUpdateLastBalance": "search():[collection=account;find=[id.in=accountsAndBalances:().():account]]:[if():[_.data.value()]:[_.data.values()._():[_.lastBalance=newBalance:().id];saveUpdate()]:[handleFailedResponse():[res=[msg='Something went wrong during update last transacion']]]]",
                    "saveUpdate": "save():[collection=account;data=_.data.values()]:[delGBVar();if():[!_.data]:[handleFailedResponse():[res=[msg='Something went wrong during update last balance']]]]",
                    "pushInRepairStack": "repairStack:().push():[delete=true;collection=transaction;pushLocation='saveTransaction.saveBalance';data=_.data.clone()];"
                },
                "resetData": {
                    "_": "reInitializeData();checkLedgerAndCurrencyMatching();saveTransaction():[data=().editedData]",
                    "reInitializeData": "().editedData=[[_.data].flat();if():[_.data.'credit-debit'.toLowerCase()=credit]:[credit=_.data.amount;debit=0]:[debit=_.data.amount;credit=0]];().editedData.amount.del();().editedData.'credit-debit'.del()",
                    "checkLedgerAndCurrencyMatching": "if():[().editedData.ledgerAccount.split():'/'.2.num()!=exchangeRatesInfo:().find():[code=().editedData.currency].counter]:[().editedData.ledgerAccount=().editedData.ledgerAccount.slice()::[-1]+exchangeRatesInfo:().find():[code=().editedData.currency].counter]"
                },
                "delGBVar": "accountsAndBalances:().del();accountsLastBalances:().del();transactionReceivedData:().del();newBalance:().del()",
                "checkCreditLimit": {
                    "_": "if():[accountsAndBalances:().0.limit||accountsAndBalances:().0.limit=0]:[calculateLimitInSystemCurrency();handleCreditLimit()]",
                    "handleCreditLimit": "if():[newBalance:().systemAccountBalances.0.balance<=0;[newBalance:().systemAccountBalances.0.balance*[-1]]>().limit]:[handleFailedResponse():[res=[msg='You have exceed the credit limit of account '+newBalance:().ledgerAccount]]]",
                    "calculateLimitInSystemCurrency": "().limit=accountsAndBalances:().0.limit/exchangeRatesInfo:().find():[code=accountsAndBalances:().0.creditLimitCurrency].exchangeRate"
                },
                "calculateAmountsAndExchangeRates": {
                    "_": "calculateSystemCurrencyRate();calculateGovermnetAmounts();calculateSystemAmounts()",
                    "calculateSystemCurrencyRate": "().systemCurrencyRate=exchangeRatesInfo:().find():[counter=_.ledgerAccount.split():'/'.2.num()].exchangeRate",
                    "calculateSystemAmounts": "().sysCredit=().currentCredit/().systemCurrencyRate;().sysDebit=().currentDebit/().systemCurrencyRate",
                    "calculateGovermnetAmounts": "().currentCredit=_.credit||0;().currentDebit=_.debit||0;().currentBalance=().currentCredit-().currentDebit"
                },
                "combineData": {
                    "_": "combineAccountWithItsLastBalance();setNewBalance():[transactionReceivedData:()]",
                    "combineAccountWithItsLastBalance": "accountsAndBalances:()._():[accountsLastBalances:()._():[if():[_.id=__.lastBalance]:[__.lastBalanceData=_]]]",
                    "setNewBalance": {
                        "_": "setDefaultData();if():[_.openingBalance='Yes']:[addOpeningBalanceData()]:[addNonOpeningBalanceData()];addVoucherAndInvoiceRefs();setAccountBalances()",
                        "setDefaultData": "newBalance:()=[currency=_.currency;account=_.account;ledgerAccount=_.ledgerAccount;credit=().currentCredit;debit=().currentDebit;exchangeRates=exchangeRatesInfo:()]",
                        "addOpeningBalanceData": "newBalance:().():[systemAccountBalances=:[account=_.account;credit=().currentCredit;debit=().currentDebit;balance=().currentBalance]]",
                        "addNonOpeningBalanceData": "newBalance:().accountBalances=accountsAndBalances:().find():[account=newBalance:().account].lastBalanceData.accountBalances",
                        "addVoucherAndInvoiceRefs": "newBalance:().():[voucher=_.voucher;voucherRef=_.voucherRef;invoiceID=_.invoiceID;invoiceRef=_.invoiceRef]",
                        "setAccountBalances": "accountsAndBalances:()._():[().instance.del();().instance=_.lastBalanceData.accountBalances.find():[ledgerAccount=__.ledgerAccount].accountBalances.find():[account=_.account];if():[!().instance]:[().instance=[credit=0;debit=0;balance=0;account=_.account]];().accountBalance=[account=_.account;credit=[().instance.credit]+().currentCredit;debit=().instance.debit+().currentDebit];().accountBalance.balance=().accountBalance.debit-().accountBalance.credit;pushInAccountBalances();().accountBalance.del()];setSystemAccountBalance()",
                        "pushInAccountBalances": "if():[newBalance:().accountBalances.find():[ledgerAccount=__.ledgerAccount]]:[newBalance:().accountBalances.find():[ledgerAccount=__.ledgerAccount].accountBalances.replace():[account=().accountBalance.account]:[().accountBalance]]:[newBalance:().accountBalances.push():[ledgerAccount=__.ledgerAccount;accountBalances=:];pushInAccountBalances()]",
                        "setSystemAccountBalance": "accountsAndBalances:()._():[().instance=_.lastBalanceData.systemAccountBalances.find():[account=_.account];().accountBalance=[account=_.account;credit=().instance.credit+().sysCredit;debit=().instance.debit+().sysDebit];().accountBalance.balance=().accountBalance.debit-().accountBalance.credit;newBalance:().systemAccountBalances.push():[().accountBalance]]"
                    }
                },
                "getAllAccountsRelatedToThisTransaction": {
                    "_": "getAccounts():[id=transactionReceivedData:().account]",
                    "getAccounts": {
                        "_": "search():[collection=account;find=[id=_.id]]:[if():[_.data.value()]:[handleSuccessSearch()]:[handleFailedResponse():[res=[msg='Account not found!']]]]",
                        "handleSuccessSearch": "pushInRepairStack();pushInAccountsAndBalances();if():[_.data.value().headAccount]:[getAccounts():[id=_.data.value().headAccount]]",
                        "pushInRepairStack": "if():[!repairStack:().find():[data.id=_.data.value().id]]:[repairStack:().push():[update=true;collection=account;pushLocation='saveTransaction.getAccounts';data=_.data.value().clone()]]",
                        "pushInAccountsAndBalances": "accountsAndBalances:().push():[account=_.data.value().id;if():[_.data.value().lastBalance]:[lastBalance=_.data.value().lastBalance]:[lastBalanceData=lastBalanceData()];headAccount=_.data.value().headAccount||false;limit=_.data.value().limit;creditLimitCurrency=_.data.value().creditLimitCurrency;accountName=_.data.value().name]",
                        "lastBalanceData": "return():[[account=_.data.value().id;description='Opening';credit=0;debit=0;systemAccountBalances=:[account=_.data.value().id;credit=0;debit=0;balance=0]]]"
                    }
                },
                "getAccountsLastBalances": {
                    "_": "().existLastBalance=false;accountsAndBalances:()._():[if():[_.lastBalance]:[().existLastBalance=true]];if():[().existLastBalance]:[getLastTransactions()]",
                    "pushInRepairStack": "_.data.values()._():[if():[!repairStack:().find():[data.id=_.id]]:[repairStack:().push():[update=true;collection=transaction;pushLocation='saveTransaction.getAccountsLastBalances';data=_.clone()]]]",
                    "getLastTransactions": "search():[collection=transaction;find=[id.in=accountsAndBalances:().():lastBalance]]:[if():[_.data.value()]:[pushInRepairStack();accountsLastBalances:()=_.data.values()]:[handleFailedResponse():[res=[action=saveTransaction_getBalances_getLastTransactions;msg='Transaction not found!']]]]"
                },
                "checkToSaveBlackMarketDefferneceAmount": {
                    "_": "if():[().differentRateRatio!=1]:[if():[().govermnetCredit>0]:[]:[]]"
                }
            },
            "loopOverStackAndSaveData": {
                "updateData": "().newDataToUpdate=[[_.data.value()].flat();[__.data].flat()];save():[collection=__.collection;data=().newDataToUpdate]:[if():[!_.data]:[msg='Something went wrong during update in '+[__.collection]]]",
                "saveData": "if():[_.collection]:[repairStack:().push():[delete=true;collection=_.collection;pushLocation='loopOverStackAndSaveData.saveData';data=_.data.clone()];save():[collection=_.collection;data=_.data]:[if():[!_.data]:[handleFailedResponse():[res=[msg='Something went wrong during saving data!']]]]]:[handleFailedResponse():[res=[msg='Collection not exist!']]]",
                "getDataToUpdate": "if():[_.data.id]:[search():[collection=_.collection;find=[id=_.data.id]]:[if():[_.data.value()]:[pushInRepairStack();updateData()]:[handleFailedResponse():[res=[taha=taha:();failedLocation='loopOverStackAndSaveData.getDataToUpdate';msg='Something went wrong during update in '+[__.collection]]]]]]:[handleFailedResponse():[res=[under=_;msg='Id not found to update!']]]",
                "_": "#send():[success=false;saveStack=saveStack:();mainData=mainReceivedData:();taha=taha:()];[loopOverStack()]()::[send():[success=fasle;bb=bb:();data=saveStack:().0;stack=saveStack:();msg=mainData:().collection.capitalize()+' added successfully!']]",
                "pushInRepairStack": "if():[!repairStack:().find():[data.id=_.data.value().id]]:[repairStack:().push():[update=true;collection=__.collection;pushLocation='loopOverStackAndSaveData.getDataToUpdate';data=_.data.value().clone()]];",
                "loopOverStack": "saveStack:()._()::[if():[_.beforeSaveAction]:[[_.beforeSaveAction]()];if():[_.update]:[getDataToUpdate()].elif():[_.customUpdate]:[[__.customUpdate]():[data=_.data]].elif():[_.customSave]:[[__.customSave]():[data=_.data]].elif():[_.collection='transaction']:[if():[_.update]:[updateTransaction():[data=_.data;collection=_.collection]]:[saveTransaction():[data=_.data;collection=_.collection]]]:[saveData()]]"
            },
            "updateTransaction": {
                "_": "#send():[success=false;under=_;mainRecivedData=mainReceivedData:()];resetData():[data=_];().newCredit=().editedData.credit;().newDebit=().editedData.debit;[[getTransaction()]()::[getAllNextTransactions()]]()::[[editBalances():[transactions=().allTransactions;newData=().editedData;currentTransaction=().transactionData.id]]()::[updateTransactions()]]",
                "getTransaction": "search():[collection=transaction;find=[id=_.transaction;#voucher=_.voucher;#ledgerAccount=_.ledgerAccount]]:[if():[_.data.value()]:[bb:().push():[_.data.value()];().transactionData=_.data.value();().oldCredit=_.data.value().credit;().oldDebit=_.data.value().debit]:[handleFailedResponse():[res=[msg='Transaction not found!']]]]",
                "resetData": {
                    "_": "reInitializeData()",
                    "reInitializeData": "().editedData=[[_.data].flat();if():[_.data.'credit-debit'.toLowerCase()=credit]:[credit=_.data.amount;debit=0]:[debit=_.data.amount;credit=0]];().editedData.amount.del();().editedData.'credit-debit'.del()"
                },
                "getAllNextTransactions": {
                    "_": "search():[collection=transaction;find=['systemAccountBalances.account'.in=().transactionData.systemAccountBalances.():account;creationDate.gte=().transactionData.creationDate]]:[if():[_.data.value()]:[().allTransactions=_.data.values()]:[handleFailedResponse():[res=[msg='Transaction not found!']]]]"
                },
                "editBalances": {
                    "_": "_.transactions._():[updateAccountBalances();calculateAmountsInSystemCurrency();updateSystemAccountBalances();if():[_.id=__.currentTransaction]:[updateCreditDebit()]]",
                    "updateAccountBalances": "_.accountBalances.find():[ledgerAccount=__.newData.ledgerAccount].accountBalances._():[_.credit=_.credit-().oldCredit+().newCredit;_.debit=_.debit-().oldDebit+().newDebit;_.balance=_.debit-_.credit]",
                    "calculateAmountsInSystemCurrency": "().exchangeRate=_.exchangeRates.find():[code=().transactionData.currency].exchangeRate",
                    "updateSystemAccountBalances": "_.systemAccountBalances._():[_.credit=_.credit-().oldCredit/().exchangeRate+().newCredit/().exchangeRate;_.debit=_.debit-().oldDebit/().exchangeRate+().newDebit/().exchangeRate;_.balance=_.debit-_.credit]",
                    "updateCreditDebit": "_.credit=().newCredit;_.debit=().newDebit;_.sysCredit=().newCredit/().exchangeRate;_.sysDebit=().newDebit/().exchangeRate"
                },
                "updateTransactions": "().allTransactions._()::[save():[collection=transaction;data=_]]"
            },
            "searchAccount": {
                "getAccounts": "search():[collection=account;if():[_.data.keys().len()>0]:[find=[accountSearchFields()]];limit=25;skip=_.receivedDataCounter]:[if():[_.data.value()]:[if():[!__.var]:[getLastBalance()]:[[__.var]:()=_.data.values()]]:[if():[!__.keepInServer]:[handleFailedResponse():[res=[msg='No account found!';under=_;under2=__]]]]]",
                "combineData": "_.data.values()._():[().correspondingLastBalance=LastBalanceSearchResult:().find():[id=_.lastBalance]||false;if():[().correspondingLastBalance]:[_.credit=().correspondingLastBalance.systemAccountBalances.find():[account=_.id].credit;_.debit=().correspondingLastBalance.systemAccountBalances.find():[account=_.id].debit;_.balance=().correspondingLastBalance.systemAccountBalances.find():[account=_.id].balance;koukou:().push():[_]]:[if():[!___.data.transactionFromDate;!___.data.transactionToDate]:[koukou:().push():[_]]]];if():[koukou:().len()>0]:[send():[success=true;;data=_.data.values().sort():[ascending;path=creationDate];path=creationDate]]:[send():[success=false;msg='No account found!']]",
                "getLastBalance": "[searchTransaction():[var=LastBalanceSearchResult;docs=_.data.values().():lastBalance;data=[fromDate=__.data.transactionFromDate;toDate=__.data.transactionToDate]]]()::[if():[LastBalanceSearchResult:()]:[;combineData()]:[handleFailedResponse():[res=[msg='No last balances found!']]]]",
                "accountSearchFields": "if():[_.data.headAccounts]:[headAccount.in=_.data.headAccounts];if():[_.data.type]:[type=_.data.type];if():[_.data.name]:['name.lowercase()'.inc=_.data.name.lowercase()];if():[_.data.ledgerAccount]:[ledgerAccount.inc=_.data.ledgerAccount];if():[_.data.generalLedger]:[startsWith.inc=_.data.generalLedger];if():[_.data.accountNumber]:[accountNumber=_.data.accountNumber.toString()];if():[_.data.currency]:[currency.inc=_.data.currency]",
                "_": "getAccounts()"
            },
            "#updateNotificationsInSession": {
                "findDueSchedule": "_.data.value().schedule._():[if():[_.dueDate.timestamp()<=today().timestamp()]:[dueSchedule:().push():[_.id]]];if():[dueSchedule:()]:[getDueSchedule()];#:[dueNotifications:()=_.data.value().notification]",
                "getNotifications": "search():[collection=notification;docs=dueNotifications:()]:[if():[_.data.value()]:[preperSessionNotificationforUpdate()]]",
                "getDueSchedule": "search():[collection=schedule;docs=dueSchedule:()]:[if():[_.data.value()]:[separateNotifications()]]",
                "separateNotifications": "_.data.values()._():[if():[_.notification]:[dueNotifications:().push():[_.notification]]];if():[dueNotifications:()]:[getNotifications()]:[dueNotifications:()=__.data.value().notification]",
                "updateSession": "save():[collection=session;data=___.data.value()];dueNotifications:()=___.data.value().notification.():id",
                "preperSessionNotificationforUpdate": "dueSchedule:()._():[____.data.value().schedule.pull():[id=_]];dueNotifications:()._():[____.data.value().notification.push():[id=_]];updateSession()",
                "getSession": "search():[collection=session;find:[session=_.session]]:[if():[_.data.value()]:[findDueSchedule()]]",
                "_": "getSession()"
            },
            "updateAppendVoucherToInvoice": {
                "_": "getInvoices()",
                "getInvoices": "search():[collection=invoice;find=[id.in=_.invoicesInfo.():id]]:[if():[_.data.value()]:[().invoicesData=_.data.values();checkIfCustomerOrSupplier()]:[send():[success=false;msg='No invoice found to append!']]]",
                "checkIfCustomerOrSupplier": "if():[__.ledgerAccount.slice():0:2='40']:[updateInvoiceIfSupplier()].elif():[__.ledgerAccount.slice():0:2='41']:[updateInvoiceIfCustomer()]:[send():[success=false;msg='Append invoice only available for customers or suppliers!']]",
                "updateInvoiceIfCustomer": "__.invoicesInfo._():[().invoicesData.find():[id=_.id]._():[().prevAppend=_.receivablesPayments.find():[voucherID=____.voucher];_.receivables.remainingAmount=_.receivables.remainingAmount+().prevAppend.payment-__.payment;_.receivablesPayments.find():[voucherID=____.voucher].payment=__.payment]];saveInvoicesData()",
                "updateInvoiceIfSupplier": "__.invoicesInfo._():[().invoicesData.find():[id=_.id]._():[().prevAppend=_.payablesPayments.find():[voucherID=____.voucher];_.payables.find():[supplier=____.ledgerAccount]._():[_.remainingAmount=_.remainingAmount+().prevAppend.payment-___.payment];_.payablesPayments.find():[voucherID=____.voucher].payment=__.payment]];saveInvoicesData()",
                "saveInvoicesData": "save():[collection=invoice;data=().invoicesData]:[if():[!_.data]:[send():[success=false;msg='Something went wrong during append invoice!']]]"
            },
            "appendVoucherToInvoice": {
                "_": "getInvoices()",
                "getInvoices": "search():[collection=invoice;find=[id.in=_.invoicesInfo.():id]]:[if():[_.data.value()]:[().invoicesData=_.data.values();checkIfCustomerOrSupplier()]:[send():[success=false;msg='No invoice found to append!']]]",
                "checkIfCustomerOrSupplier": "if():[__.ledgerAccount.slice():0:2='40']:[updateInvoiceIfSupplier()].elif():[__.ledgerAccount.slice():0:2='41']:[updateInvoiceIfCustomer()]:[send():[success=false;msg='Append invoice only available for customers or suppliers!']]",
                "updateInvoiceIfCustomer": "__.invoicesInfo._():[().invoicesData.find():[id=_.id]._():[_.receivables.remainingAmount-=__.payment;_.receivablesPayments.push():[payment=__.payment;voucherID=____.voucher]]];saveInvoicesData()",
                "updateInvoiceIfSupplier": "__.invoicesInfo._():[().invoicesData.find():[id=_.id]._():[_.payables.find():[supplier=____.ledgerAccount]._():[_.remainingAmount-=___.payment];_.payablesPayments.push():[supplier=____.ledgerAccount;payment=__.payment;voucherID=____.voucher]]];saveInvoicesData()",
                "saveInvoicesData": "save():[collection=invoice;data=().invoicesData]:[if():[!_.data]:[send():[success=false;msg='Something went wrong during append invoice!']]]"
            },
            "#searchTransaction": {
                "getAccount": "[searchAccount():[var=accountSearchResult;data=[if():[_.data.ledgerAccount]:[ledgerAccount=_.data.ledgerAccount];if():[_.data.accountNumber]:[accountNumber=_.data.accountNumber];if():[_.data.generalLedger]:[generalLedger=_.data.generalLedger];if():[_.data.currency]:[currency=_.data.currency]]]]()::[if():[accountSearchResult:()]:[().headAccount=accountSearchResult:().value().id;[().headAccounts=accountSearchResult:().():id;chekHeadAccounts()]()::[getTransaction():[data=[account=accountSearchResult:().():id]]]]:[successFalseAction()]]",
                "chekHeadAccounts": "if():[().headAccounts]:[searchAccount():[var=headAccountSearchResult;keepInServer=true;data=[headAccounts=().headAccounts]]:[if():[headAccountSearchResult:()]:[().headAccounts=headAccountSearchResult:().():id;accountSearchResult:()=accountSearchResult:().concat():[headAccountSearchResult:()];headAccountSearchResult:().del();chekHeadAccounts()]]]",
                "checkIfAccounResultExist": "transactionSearchResult:()=_.data.values();if():[accountSearchResult:()]:[setResultKeys()]:[[searchAccount():[var=accountSearchResult;docs=_.data.values().():account]]()::[if():[accountSearchResult:()]:[setResultKeys()]:[successFalseAction()]]]",
                "_": "if():[_.data.ledgerAccount||_.data.accountNumber||_.data.generalLedger||_.data.currency]:[getAccount()]:[getTransaction():[var=_.var;docs=_.docs]]",
                "getTransaction": "().find=[];_.docs=_.docs.filter();search():[collection=transaction;if():[__.data.keys().len()>0||___.data.keys().len()>0]:[find=transactionSearchFields()];limit=25;skip=__.receivedDataCounter]:[if():[_.data.value()]:[if():[__.var]:[[__.var]:()=_.data.values()]:[checkIfAccounResultExist()]]:[if():[__.var]:[[__.var]:()=:]:[handleFailedResponse():[res=[msg='No transaction found!']]]]]",
                "transactionSearchFields": "if():[__.data.Reference]:[if():[__.data.Reference='Invoice']:[().find.invoiceRef.exists=true]:[().find.voucherRef.exists=true]];if():[_.docs]:[().find.id.in=_.docs];if():[_.data.account]:[if():[_.data.account.type()=list]:[().find.account.in=_.data.account]:[().find.account=_.data.account]];if():[__.data.fromDate||___.data.fromDate]:[().find.creationDay.'>='=__.data.fromDate];if():[__.data.invoiceRef]:[().find.invoiceRef=__.data.invoiceRef];if():[__.data.toDate||___.data.toDate]:[().find.creationDay.'<='=__.data.toDate];return():[().find]",
                "setResultKeys": {
                    "_": "if():[___.data.currency]:[calculateExchangeRates()]:[getDefaultCurrency()]",
                    "calculateExchangeRates": "transactionSearchResult:()._():[().exchangeRate=_.exchangeRates.find():[code=____.data.currency].exchangeRate;_.sysCredit*=().exchangeRate;_.sysDebit*=().exchangeRate;_.balance=_.systemAccountBalances.find():[account=_.account].balance*().exchangeRate;_.exchangeRate=().exchangeRate;_.currencySymbole=_.exchangeRates.find():[code=____.data.currency].symbole];setKeys()",
                    "sendData": "send():[success=true;data=().transactionsData.sort():[descending;path=creationDate]]",
                    "setKeys": "transactionSearchResult:()._():[().transactionsData.push():[accountName=accountSearchResult:().find():[id=_.account].name;creationDate=_.creationDate;creationDay=_.creationDay;id=_.id;generalLedger=_.generalLedger;ledgerAccount=_.ledgerAccount;accountNumber=_.ledgerAccount.split():'/'.1;transactionCurrency=_.currency;currency=__.currency||____.data.currency;currencySymbole=_.currencySymbole;date=_.creationDate;reference=_.voucherRef||_.invoiceRef;description=_.description;exchangeRate=_.exchangeRate||_.exchangeRates.find():[code=_.currency].exchangeRate;debit=_.sysDebit;credit=_.sysCredit;balance=_.balance||_.systemAccountBalances.find():[account=_.account].balance]];sendData()",
                    "getDefaultCurrency": "search():[collection=currency;find=[counter=0]]:[if():[_.data.value()]:[____.data.currency=_.data.value().code;setKeys():[currency=____.data.currency]]]"
                },
                "#setTransactionKeys": "if():[___.data.currency]:[transactionSearchResult:()._():[().exchangeRate=_.exchangeRates.find():[code=____.data.currency].exchangeRate;_.sysCredit*=().exchangeRate;_.sysDebit*=().exchangeRate;_.balance*=_.sysDebit-_.sysCredit]];#send():[transactionSearchResult=transactionSearchResult:().clone()]",
                "#setCreditDebitBalance": "if():[().headAccount]:[_.balance=_.systemAccountBalances.find():[account=().headAccount].balance]:[;#_.credit=_.accountBalances.[-1].credit;#_.debit=_.accountBalances.[-1].debit;_.balance=_.systemAccountBalances.[-1].balance];#_.balance=if():[().headAccount]:[_.accountBalances.find():[account=().headAccount].balance]:[_.accountBalances.[-1].balance];_.systemAccountBalances.del()"
            },
            "searchTransaction": {
                "_": "[if():[accoutsearchFieldsExists()]:[[getAccount()]()::[getTransaction()]]:[[getTransaction():[var=_.var;docs=_.docs]]()::[getAccount()]]]()::[setResultKeys()]",
                "accoutsearchFieldsExists": "_.data.ledgerAccount||_.data.accountNumber||_.data.generalLedger||_.data.currency",
                "getTransaction": {
                    "_": "setTransactionSearchFields();_.docs=_.docs.filter();getTransactions()",
                    "setTransactionSearchFields": "if():[__.data.Reference]:[if():[__.data.Reference='Invoice']:[().find.invoiceRef.exists=true]:[().find.voucherRef.exists=true]];if():[_.docs]:[().find.id.in=_.docs];if():[_.data.account]:[if():[_.data.account.type()=list]:[().find.account.in=_.data.account]:[().find.account=_.data.account]];if():[__.data.fromDate||___.data.fromDate]:[().find.creationDay.'>='=__.data.fromDate];if():[__.data.invoiceRef]:[().find.invoiceRef=__.data.invoiceRef];if():[__.data.toDate||___.data.toDate]:[().find.creationDay.'<='=__.data.toDate]",
                    "getTransactions": "search():[collection=transaction;if():[().find]:[find=().find];limit=25;skip=__.receivedDataCounter]:[if():[_.data.value()]:[handleSuccessSearch()]:[handleFailedSearch()]]",
                    "handleSuccessSearch": "if():[__.var]:[[__.var]:()=_.data.values()]:[transactionSearchResult:()=_.data.values();#checkIfAccounResultExist()]",
                    "handleFailedSearch": "if():[__.var]:[[__.var]:()=:]:[handleFailedResponse():[res=[msg='No transaction found!']]]"
                },
                "getAccount": {
                    "_": "[setAccountSearchFields();searchAccount():[().accountSearchFields]]()::[if():[accountSearchResult:()]:[handleSuccessSearch()]:[successFalseAction()]]",
                    "setAccountSearchFields": "().accountSearchFields=[var=accountSearchResult;data=[if():[_.data.ledgerAccount]:[ledgerAccount=_.data.ledgerAccount];if():[_.data.accountNumber]:[accountNumber=_.data.accountNumber];if():[_.data.generalLedger]:[generalLedger=_.data.generalLedger];if():[_.data.currency]:[currency=_.data.currency]];if():[transactionSearchResult:()]:[docs=transactionSearchResult:().():account]]",
                    "successFalseAction": "handleFailedResponse():[res=[msg='No transaction found!']]",
                    "handleSuccessSearch": "().headAccount=accountSearchResult:().value().id;().headAccounts=accountSearchResult:().():id;chekHeadAccounts()",
                    "chekHeadAccounts": {
                        "_": "if():[().headAccounts]:[[searchHeadAccounts()]()::[if():[headAccountSearchResult:()]:[concatHeadAccountsAndAccounts();headAccountSearchResult:().del();chekHeadAccounts()]]]",
                        "searchHeadAccounts": "searchAccount():[var=headAccountSearchResult;keepInServer=true;data=[headAccounts=().headAccounts]]",
                        "concatHeadAccountsAndAccounts": "().headAccounts=headAccountSearchResult:().():id;accountSearchResult:()=accountSearchResult:().concat():[headAccountSearchResult:()]"
                    }
                },
                "setResultKeys": {
                    "_": "[if():[_.data.currency]:[calculateExchangeRates();setKeys()]:[setKeys()]]()::[;sendData()]",
                    "calculateExchangeRates": "transactionSearchResult:()._():[().exchangeRate=_.exchangeRates.find():[code=__.data.currency].exchangeRate;_.sysCredit*=().exchangeRate;_.sysDebit*=().exchangeRate;_.balance=_.systemAccountBalances.find():[account=_.account].balance*().exchangeRate;_.exchangeRate=().exchangeRate;_.currencySymbole=_.exchangeRates.find():[code=__.data.currency].symbole]",
                    "setKeys": "transactionSearchResult:()._():[().transactionsData.push():[accountName=accountSearchResult:().find():[id=_.account].name;date=_.creationDate;creationDay=_.creationDay;id=_.id;generalLedger=_.generalLedger;ledgerAccount=_.ledgerAccount;accountNumber=_.ledgerAccount.split():'/'.1;transactionCurrency=_.currency;currency=__.data.currency;currencySymbole=_.currencySymbole;reference=_.voucherRef||_.invoiceRef;description=_.description;exchangeRate=_.exchangeRate||_.exchangeRates.find():[code=_.currency].exchangeRate;debit=_.sysDebit;credit=_.sysCredit;balance=_.balance||_.systemAccountBalances.find():[account=_.account].balance]]",
                    "send():[success=true;data=transactionsData:().sort():[descending;path=creationDate];=transactionSearchResult:()]": {
                        "[success": true,
                        "data": "transactionsData",
                        "success": true,
                        "message": "Action executed successfully!"
                    },
                    "sendData": "send():[success=true;data=().transactionsData.sort():[descending;path=creationDate];]"
                },
                "sendData": "send():[success=true;data=transactionsData:().sort():[descending;path=creationDate];transactionSearchResult=transactionSearchResult:()]"
            }
        },
        "comments": [
            {
                "note": "recives collection name and branch and it create a reference number",
                "path": [
                    "generatReferenceNumber"
                ]
            },
            {
                "note": "recives ledger, branch, currency and it create a ledger counter",
                "path": [
                    "generateLedgerCounter"
                ]
            },
            {
                "note": "receive currency code + branch ID => currency ID",
                "path": [
                    "getCurrencyId"
                ]
            },
            {
                "note": "receive ledger => it make sure it is valid and get the account ID",
                "path": [
                    "getIdByLedger"
                ]
            },
            {
                "note": "receives session => user Info + permission",
                "path": [
                    "getUserBySession"
                ]
            },
            {
                "note": "if the data sent has an IDpp it will update else it will check for duplicate",
                "path": [
                    "customCheckExistence"
                ]
            },
            {
                "note": "receive ref number split it then get the collection and retrive the right doc",
                "path": [
                    "customGetRef"
                ]
            },
            {
                "note": "this action saves records on every creation or update ~on any doc",
                "path": [
                    "customHistory"
                ]
            },
            {
                "note": "receives oldData & data and check the difference",
                "path": [
                    "getDataDifference"
                ]
            },
            {
                "note": "update takes collection + new data => update:() = true",
                "path": [
                    "updateDoc"
                ]
            },
            {
                "note": "custom Save",
                "path": [
                    "customSave"
                ]
            },
            {
                "note": "custom Search",
                "path": [
                    "#customSearchEngine1"
                ]
            },
            {
                "note": "",
                "path": [
                    "#d"
                ]
            },
            {
                "note": "initailize currentVariable if type satsify; else false",
                "path": [
                    "dataTypeHandler",
                    "checkDataType"
                ]
            },
            {
                "note": "get account and push its data in accountsAndBalances:() [account;lastBalance;headAccount(if available); lastBalanceData(if last balance not exists)]",
                "path": [
                    "#saveTransaction",
                    "getAccounts"
                ]
            },
            {
                "note": "only in this case we dont want to get Balances; it init newBalance:()",
                "path": [
                    "saveTransaction",
                    "organizeData",
                    "#setBalan"
                ]
            },
            {
                "note": "@@@@@@@@@",
                "path": [
                    "#saveTransaction",
                    "setBalanceWithoutHeadAccount"
                ]
            },
            {
                "note": "init accountsAndBalances:() [all accounts related to this transaction (self\\head)]",
                "path": [
                    "saveTransaction",
                    "getAllAccountsRelatedToThisTransaction"
                ]
            },
            {
                "note": "get last transactions for all accounts in accountsAndBalances:() if exists",
                "path": [
                    "saveTransaction",
                    "getAccountsLastBalances"
                ]
            },
            {
                "note": "counter",
                "path": [
                    "initializeDocAndCheckForRecursion"
                ]
            }
        ],
        "collapsed": [
            {
                "path": [
                    "saveSupplier"
                ]
            },
            {
                "path": [
                    "findOffer&RemoveHotel"
                ]
            },
            {
                "path": [
                    "saveOffer"
                ]
            },
            {
                "path": [
                    "saveSponsor"
                ]
            },
            {
                "path": [
                    "saveUser"
                ]
            },
            {
                "path": [
                    "updateDoc"
                ]
            },
            {
                "path": [
                    "[_"
                ]
            },
            {
                "path": [
                    "branch"
                ]
            },
            {
                "path": [
                    "path"
                ]
            },
            {
                "path": [
                    "saveAccount"
                ]
            },
            {
                "path": [
                    "#getDataOnLoad"
                ]
            },
            {
                "path": [
                    "saveAsset"
                ]
            },
            {
                "path": [
                    "#customSearchEngine1"
                ]
            },
            {
                "path": [
                    "#formatCollection"
                ]
            },
            {
                "path": [
                    "searchSheet"
                ]
            },
            {
                "path": [
                    "#checkRequirementfff"
                ]
            },
            {
                "path": [
                    "#getPricing"
                ]
            },
            {
                "path": [
                    "#checkRequiremenddd"
                ]
            },
            {
                "path": [
                    "#saveTransaction",
                    "resetData"
                ]
            },
            {
                "path": [
                    "#saveTransaction",
                    "getTransactionsRelatedAccounts"
                ]
            },
            {
                "path": [
                    "#saveTransaction",
                    "getLastBalances"
                ]
            },
            {
                "path": [
                    "#saveTransaction",
                    "combineData"
                ]
            },
            {
                "path": [
                    "#saveTransaction",
                    "getAccounts"
                ]
            },
            {
                "path": [
                    "#saveTransaction",
                    "setBalanceWithoutHeadAccount"
                ]
            },
            {
                "path": [
                    "#saveTransaction",
                    "saveBalance"
                ]
            },
            {
                "path": [
                    "#saveTransaction",
                    "resetData"
                ]
            },
            {
                "path": [
                    "#saveTransaction",
                    "getBalances"
                ]
            },
            {
                "path": [
                    "dataTypeHandler",
                    "checkDataType"
                ]
            },
            {
                "path": [
                    "searchAccount"
                ]
            },
            {
                "path": [
                    "searchAssets"
                ]
            },
            {
                "path": [
                    "searchNotification"
                ]
            },
            {
                "path": [
                    "updateImage"
                ]
            },
            {
                "path": [
                    "updateScheduleInSession"
                ]
            },
            {
                "path": [
                    "updateSheet"
                ]
            },
            {
                "path": [
                    "changeSheetName"
                ]
            },
            {
                "path": [
                    "checkSheet"
                ]
            },
            {
                "path": [
                    "customCheckExistence"
                ]
            },
            {
                "path": [
                    "customCondition"
                ]
            },
            {
                "path": [
                    "dropListFromSheet"
                ]
            },
            {
                "path": [
                    "generateUsername"
                ]
            },
            {
                "path": [
                    "getCurrencyId"
                ]
            },
            {
                "path": [
                    "getDataDifference"
                ]
            },
            {
                "path": [
                    "getIdByLedger"
                ]
            },
            {
                "path": [
                    "getSessionAndMarkNotificationAsRead"
                ]
            },
            {
                "path": [
                    "handleFailedResponse"
                ]
            },
            {
                "path": [
                    "createDefaultLedgerAccounts"
                ]
            },
            {
                "path": [
                    "updateTransaction",
                    "getAllNextTransactions"
                ]
            },
            {
                "path": [
                    "updateTransaction",
                    "resetData"
                ]
            },
            {
                "path": [
                    "#updateNotificationsInSession"
                ]
            },
            {
                "path": [
                    "customHistory"
                ]
            },
            {
                "path": [
                    "customSearchEngine"
                ]
            },
            {
                "path": [
                    "searchVoucher"
                ]
            },
            {
                "path": [
                    "appendVoucherToInvoice"
                ]
            },
            {
                "path": [
                    "updateAppendVoucherToInvoice"
                ]
            },
            {
                "path": [
                    "getUserBySession"
                ]
            },
            {
                "path": [
                    "checkAccountNumberExistence"
                ]
            },
            {
                "path": [
                    "generateLedgerCounter"
                ]
            },
            {
                "path": [
                    "checkRequirement",
                    "checkPath",
                    "checkDataTypeForStaticDoc"
                ]
            },
            {
                "path": [
                    "updateTransaction",
                    "editBalances"
                ]
            },
            {
                "path": [
                    "generatReferenceNumber"
                ]
            },
            {
                "path": [
                    "initializeDocAndCheckForRecursion"
                ]
            },
            {
                "path": [
                    "updateTransaction"
                ]
            },
            {
                "path": [
                    "searchCurrency"
                ]
            },
            {
                "path": [
                    "login"
                ]
            },
            {
                "path": [
                    "saveTransaction",
                    "checkToSaveBlackMarketDefferneceAmount"
                ]
            },
            {
                "path": [
                    "saveTransaction",
                    "checkCreditLimit"
                ]
            },
            {
                "path": [
                    "saveTransaction",
                    "saveBalance"
                ]
            },
            {
                "path": [
                    "saveTransaction",
                    "getAllAccountsRelatedToThisTransaction",
                    "getAccounts"
                ]
            },
            {
                "path": [
                    "saveTransaction",
                    "getAllAccountsRelatedToThisTransaction"
                ]
            },
            {
                "path": [
                    "saveTransaction",
                    "getAccountsLastBalances"
                ]
            },
            {
                "path": [
                    "saveTransaction",
                    "resetData"
                ]
            },
            {
                "path": [
                    "checkRequirement"
                ]
            },
            {
                "path": [
                    "dataTypeHandler"
                ]
            },
            {
                "path": [
                    "saveTransaction",
                    "combineData"
                ]
            },
            {
                "path": [
                    "loopOverStackAndSaveData"
                ]
            },
            {
                "path": [
                    "saveTransaction",
                    "calculateAmountsAndExchangeRates"
                ]
            },
            {
                "path": [
                    "saveTransaction"
                ]
            },
            {
                "path": [
                    "#saveTransaction"
                ]
            },
            {
                "path": [
                    "saveThroughSchema"
                ]
            },
            {
                "path": [
                    "searchTransaction",
                    "getAccount",
                    "chekHeadAccounts"
                ]
            },
            {
                "path": [
                    "searchTransaction",
                    "getTransaction"
                ]
            },
            {
                "path": [
                    "searchTransaction",
                    "getAccount"
                ]
            },
            {
                "path": [
                    "#searchTransaction",
                    "setResultKeys"
                ]
            },
            {
                "path": [
                    "searchTransaction",
                    "setResultKeys"
                ]
            },
            {
                "path": [
                    "#searchTransaction"
                ]
            },
            {
                "path": [
                    "searchTransaction"
                ]
            },
            {
                "path": [
                    "getDataOnLoad"
                ]
            }
        ],
        "arrange": [],
        "secured": true,
        "size": 87865
    }
}